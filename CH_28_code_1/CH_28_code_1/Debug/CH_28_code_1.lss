
CH_28_code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000045d  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000269  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ee  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000124  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000220  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000452  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/wdt.h>
#include <util/delay.h>
#include "UART.h"
int main(void)
{
	wdt_enable(WDTO_8S); // 워치독 타이머 만료 시간을 8초로 설정
  96:	29 e2       	ldi	r18, 0x29	; 41
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	a8 95       	wdr
  a2:	80 93 60 00 	sts	0x0060, r24
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	20 93 60 00 	sts	0x0060, r18
	UART_INIT(); // UART 통신 초기화
  ac:	0e 94 73 00 	call	0xe6	; 0xe6 <UART_INIT>
	UART_printString("** Initialization **\n");
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 93 00 	call	0x126	; 0x126 <UART_printString>
	uint16_t count = 0;
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x2c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x36>
  cc:	00 00       	nop
	while(1)
	{
		_delay_ms(1000); // 1초에 한 번 카운트 출력
		count++;
  ce:	21 96       	adiw	r28, 0x01	; 1
		UART_printString("Count : ");
  d0:	86 e1       	ldi	r24, 0x16	; 22
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 93 00 	call	0x126	; 0x126 <UART_printString>
		UART_print16bitNumber(count);
  d8:	ce 01       	movw	r24, r28
  da:	0e 94 a2 00 	call	0x144	; 0x144 <UART_print16bitNumber>
		UART_transmit('\n');
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	0e 94 8b 00 	call	0x116	; 0x116 <UART_transmit>
  e4:	eb cf       	rjmp	.-42     	; 0xbc <main+0x26>

000000e6 <UART_INIT>:
 */ 

#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24

	UBRR0H = 0x00;
  f0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 207;
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C |= 0x06;
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	86 60       	ori	r24, 0x06	; 6
 102:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
 104:	e1 ec       	ldi	r30, 0xC1	; 193
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 10e:	80 81       	ld	r24, Z
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <UART_transmit>:
	return UDR0;
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
 116:	e0 ec       	ldi	r30, 0xC0	; 192
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	90 81       	ld	r25, Z
 11c:	95 ff       	sbrs	r25, 5
 11e:	fd cf       	rjmp	.-6      	; 0x11a <UART_transmit+0x4>
	UDR0 = data;
 120:	80 93 c6 00 	sts	0x00C6, r24
 124:	08 95       	ret

00000126 <UART_printString>:
}

void UART_printString(char *str)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)
 12c:	88 81       	ld	r24, Y
 12e:	88 23       	and	r24, r24
 130:	31 f0       	breq	.+12     	; 0x13e <UART_printString+0x18>
 132:	21 96       	adiw	r28, 0x01	; 1
	UART_transmit(str[i]);
 134:	0e 94 8b 00 	call	0x116	; 0x116 <UART_transmit>
	UDR0 = data;
}

void UART_printString(char *str)
{
	for(int i = 0; str[i]; i++)
 138:	89 91       	ld	r24, Y+
 13a:	81 11       	cpse	r24, r1
 13c:	fb cf       	rjmp	.-10     	; 0x134 <UART_printString+0xe>
	UART_transmit(str[i]);
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <UART_print16bitNumber>:
	for(i = index; i >= 0; i--)
	UART_transmit(numString[i]);
}

void UART_print16bitNumber(uint16_t no)
{
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <UART_print16bitNumber+0xa>
 14e:	00 d0       	rcall	.+0      	; 0x150 <UART_print16bitNumber+0xc>
 150:	00 d0       	rcall	.+0      	; 0x152 <UART_print16bitNumber+0xe>
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	fc 01       	movw	r30, r24
	char numString[6] = "0";
 158:	40 e3       	ldi	r20, 0x30	; 48
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	49 83       	std	Y+1, r20	; 0x01
 162:	5a 83       	std	Y+2, r21	; 0x02
 164:	6b 83       	std	Y+3, r22	; 0x03
 166:	7c 83       	std	Y+4, r23	; 0x04
 168:	1e 82       	std	Y+6, r1	; 0x06
 16a:	1d 82       	std	Y+5, r1	; 0x05
	int i, index = 0;
	
	if(no > 0){
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	19 f4       	brne	.+6      	; 0x176 <UART_print16bitNumber+0x32>
}

void UART_print16bitNumber(uint16_t no)
{
	char numString[6] = "0";
	int i, index = 0;
 170:	00 e0       	ldi	r16, 0x00	; 0
 172:	10 e0       	ldi	r17, 0x00	; 0
 174:	3b c0       	rjmp	.+118    	; 0x1ec <UART_print16bitNumber+0xa8>
 176:	ae 01       	movw	r20, r28
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	if(no > 0){
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 180:	9f 01       	movw	r18, r30
 182:	ad ec       	ldi	r26, 0xCD	; 205
 184:	bc ec       	ldi	r27, 0xCC	; 204
 186:	0e 94 0e 01 	call	0x21c	; 0x21c <__umulhisi3>
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	9c 01       	movw	r18, r24
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	9f 01       	movw	r18, r30
 1ae:	28 1b       	sub	r18, r24
 1b0:	39 0b       	sbc	r19, r25
 1b2:	c9 01       	movw	r24, r18
 1b4:	80 5d       	subi	r24, 0xD0	; 208
 1b6:	da 01       	movw	r26, r20
 1b8:	8d 93       	st	X+, r24
 1ba:	ad 01       	movw	r20, r26
			no = no / 10;
 1bc:	9f 01       	movw	r18, r30
 1be:	ad ec       	ldi	r26, 0xCD	; 205
 1c0:	bc ec       	ldi	r27, 0xCC	; 204
 1c2:	0e 94 0e 01 	call	0x21c	; 0x21c <__umulhisi3>
 1c6:	fc 01       	movw	r30, r24
 1c8:	f6 95       	lsr	r31
 1ca:	e7 95       	ror	r30
 1cc:	f6 95       	lsr	r31
 1ce:	e7 95       	ror	r30
 1d0:	f6 95       	lsr	r31
 1d2:	e7 95       	ror	r30
{
	char numString[6] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 1d4:	c8 01       	movw	r24, r16
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	30 97       	sbiw	r30, 0x00	; 0
 1da:	11 f0       	breq	.+4      	; 0x1e0 <UART_print16bitNumber+0x9c>
 1dc:	8c 01       	movw	r16, r24
 1de:	d0 cf       	rjmp	.-96     	; 0x180 <UART_print16bitNumber+0x3c>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 1e0:	fe 01       	movw	r30, r28
 1e2:	e8 0f       	add	r30, r24
 1e4:	f9 1f       	adc	r31, r25
 1e6:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 1e8:	11 23       	and	r17, r17
 1ea:	6c f0       	brlt	.+26     	; 0x206 <UART_print16bitNumber+0xc2>
 1ec:	e1 e0       	ldi	r30, 0x01	; 1
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ec 0f       	add	r30, r28
 1f2:	fd 1f       	adc	r31, r29
 1f4:	e0 0f       	add	r30, r16
 1f6:	f1 1f       	adc	r31, r17
	UART_transmit(numString[i]);
 1f8:	80 81       	ld	r24, Z
 1fa:	0e 94 8b 00 	call	0x116	; 0x116 <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 1fe:	01 50       	subi	r16, 0x01	; 1
 200:	11 09       	sbc	r17, r1
 202:	11 23       	and	r17, r17
 204:	9c f7       	brge	.-26     	; 0x1ec <UART_print16bitNumber+0xa8>
	UART_transmit(numString[i]);
}
 206:	26 96       	adiw	r28, 0x06	; 6
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	08 95       	ret

0000021c <__umulhisi3>:
 21c:	a2 9f       	mul	r26, r18
 21e:	b0 01       	movw	r22, r0
 220:	b3 9f       	mul	r27, r19
 222:	c0 01       	movw	r24, r0
 224:	a3 9f       	mul	r26, r19
 226:	70 0d       	add	r23, r0
 228:	81 1d       	adc	r24, r1
 22a:	11 24       	eor	r1, r1
 22c:	91 1d       	adc	r25, r1
 22e:	b2 9f       	mul	r27, r18
 230:	70 0d       	add	r23, r0
 232:	81 1d       	adc	r24, r1
 234:	11 24       	eor	r1, r1
 236:	91 1d       	adc	r25, r1
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
