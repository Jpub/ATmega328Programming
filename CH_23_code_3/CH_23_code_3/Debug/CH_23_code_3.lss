
CH_23_code_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ae  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e7  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000178  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000185  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT_TIMER1>:
#define PULSE_MAX		(40000*0.1175)	// 최대 펄스 길이

void INIT_TIMER1(void)
{
	// Fast PWM 모드, TOP = ICR1
	TCCR1A |= (1 << WGM11);
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  8a:	a1 e8       	ldi	r26, 0x81	; 129
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	8c 91       	ld	r24, X
  90:	88 61       	ori	r24, 0x18	; 24
  92:	8c 93       	st	X, r24
	
	TCCR1B |= (1 << CS11);		// 분주율 8, 2MHz
  94:	8c 91       	ld	r24, X
  96:	82 60       	ori	r24, 0x02	; 2
  98:	8c 93       	st	X, r24
	
	ICR1 = 40000;				// 20ms 주기
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	9c e9       	ldi	r25, 0x9C	; 156
  9e:	90 93 87 00 	sts	0x0087, r25
  a2:	80 93 86 00 	sts	0x0086, r24
	
	TCCR1A |= (1 << COM1A1);		// 비반전 모드
  a6:	80 81       	ld	r24, Z
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	80 83       	st	Z, r24
	
	//  OC1A (PB1, 아두이노 9번) 핀을 출력으로 설정
	DDRB |= (1 << PB1);
  ac:	21 9a       	sbi	0x04, 1	; 4
  ae:	08 95       	ret

000000b0 <main>:
}

int main(void)
{
	INIT_TIMER1();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <INIT_TIMER1>
	
	while(1)
	{
		OCR1A = PULSE_MIN;		// 0도
  b4:	e8 e8       	ldi	r30, 0x88	; 136
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	44 e1       	ldi	r20, 0x14	; 20
  ba:	55 e0       	ldi	r21, 0x05	; 5
		_delay_ms(ROTATION_DELAY);
		
		OCR1A = PULSE_MID;		// 90도
  bc:	28 eb       	ldi	r18, 0xB8	; 184
  be:	3b e0       	ldi	r19, 0x0B	; 11
		_delay_ms(ROTATION_DELAY);
		
		OCR1A = PULSE_MAX;		// 180도
  c0:	8c e5       	ldi	r24, 0x5C	; 92
  c2:	92 e1       	ldi	r25, 0x12	; 18
{
	INIT_TIMER1();
	
	while(1)
	{
		OCR1A = PULSE_MIN;		// 0도
  c4:	51 83       	std	Z+1, r21	; 0x01
  c6:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	6f ef       	ldi	r22, 0xFF	; 255
  ca:	7d e3       	ldi	r23, 0x3D	; 61
  cc:	a9 e4       	ldi	r26, 0x49	; 73
  ce:	61 50       	subi	r22, 0x01	; 1
  d0:	70 40       	sbci	r23, 0x00	; 0
  d2:	a0 40       	sbci	r26, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x1e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x28>
  d8:	00 00       	nop
		_delay_ms(ROTATION_DELAY);
		
		OCR1A = PULSE_MID;		// 90도
  da:	31 83       	std	Z+1, r19	; 0x01
  dc:	20 83       	st	Z, r18
  de:	6f ef       	ldi	r22, 0xFF	; 255
  e0:	7d e3       	ldi	r23, 0x3D	; 61
  e2:	a9 e4       	ldi	r26, 0x49	; 73
  e4:	61 50       	subi	r22, 0x01	; 1
  e6:	70 40       	sbci	r23, 0x00	; 0
  e8:	a0 40       	sbci	r26, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x34>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x3e>
  ee:	00 00       	nop
		_delay_ms(ROTATION_DELAY);
		
		OCR1A = PULSE_MAX;		// 180도
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24
  f4:	6f ef       	ldi	r22, 0xFF	; 255
  f6:	7d e3       	ldi	r23, 0x3D	; 61
  f8:	a9 e4       	ldi	r26, 0x49	; 73
  fa:	61 50       	subi	r22, 0x01	; 1
  fc:	70 40       	sbci	r23, 0x00	; 0
  fe:	a0 40       	sbci	r26, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x4a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x54>
 104:	00 00       	nop
 106:	de cf       	rjmp	.-68     	; 0xc4 <main+0x14>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
