
CH_15_code_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000121  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d1  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000146  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000170  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	// 파형 출력 핀인 PB3 핀(OC2A 핀, 아두이노 11번)을 출력으로 설정
	DDRB |= (1 << PB3);
  80:	23 9a       	sbi	0x04, 3	; 4
	// 타이머/카운터 2번을 고속 PWM 모드로 설정
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
  82:	e0 eb       	ldi	r30, 0xB0	; 176
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1); // 비반전 모드
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22); // 분주비 64
  92:	e1 eb       	ldi	r30, 0xB1	; 177
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	80 83       	st	Z, r24
	while(1)
	{
		for(int i = 0; i < 256; i++){
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
			OCR2A = i; // 듀티 사이클 설정
  a0:	e3 eb       	ldi	r30, 0xB3	; 179
  a2:	f0 e0       	ldi	r31, 0x00	; 0
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
	TCCR2A |= (1 << COM2A1); // 비반전 모드
	TCCR2B |= (1 << CS22); // 분주비 64
	while(1)
	{
		for(int i = 0; i < 256; i++){
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	20 e0       	ldi	r18, 0x00	; 0
			OCR2A = i; // 듀티 사이클 설정
  a8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	af e3       	ldi	r26, 0x3F	; 63
  ac:	bc e9       	ldi	r27, 0x9C	; 156
  ae:	11 97       	sbiw	r26, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
	TCCR2A |= (1 << COM2A1); // 비반전 모드
	TCCR2B |= (1 << CS22); // 분주비 64
	while(1)
	{
		for(int i = 0; i < 256; i++){
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	8f 3f       	cpi	r24, 0xFF	; 255
  ba:	91 05       	cpc	r25, r1
  bc:	a9 f3       	breq	.-22     	; 0xa8 <main+0x28>
  be:	a4 f3       	brlt	.-24     	; 0xa8 <main+0x28>
  c0:	83 2f       	mov	r24, r19
  c2:	92 2f       	mov	r25, r18
  c4:	f1 cf       	rjmp	.-30     	; 0xa8 <main+0x28>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
