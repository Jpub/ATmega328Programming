
CH_12_code_7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000003f4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004d5  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002cc  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000323  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000144  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000247  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000046d  00000000  00000000  00001393  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8e:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_INIT>:
#include <stdlib.h>
#include "UART.h"

void ADC_INIT(unsigned char channel)
{
	ADMUX |= 0x40; 			// AVCC를 기준 전압으로 선택
  96:	ac e7       	ldi	r26, 0x7C	; 124
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	9c 91       	ld	r25, X
  9c:	90 64       	ori	r25, 0x40	; 64
  9e:	9c 93       	st	X, r25
	
	ADCSRA |= 0x07;			// 분주비 설정
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	97 60       	ori	r25, 0x07	; 7
  a8:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);		// ADC 활성화
  aa:	90 81       	ld	r25, Z
  ac:	90 68       	ori	r25, 0x80	; 128
  ae:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);		// 자동 트리거 모드
  b0:	90 81       	ld	r25, Z
  b2:	90 62       	ori	r25, 0x20	; 32
  b4:	90 83       	st	Z, r25

	ADMUX |= ((ADMUX & 0xE0) | channel);	// 채널 선택
  b6:	2c 91       	ld	r18, X
  b8:	9c 91       	ld	r25, X
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	92 2b       	or	r25, r18
  be:	89 2b       	or	r24, r25
  c0:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);		// 변환 시작
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));	// 변환 종료 대기
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	84 ff       	sbrs	r24, 4
  d2:	fd cf       	rjmp	.-6      	; 0xce <read_ADC+0x4>
	
	return ADC;				// 10비트 값을 반환
  d4:	80 91 78 00 	lds	r24, 0x0078
  d8:	90 91 79 00 	lds	r25, 0x0079
}
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
	UART_INIT();
  de:	0e 94 93 00 	call	0x126	; 0x126 <UART_INIT>
	ADC_INIT(0);
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_INIT>
	srand(read_ADC());
  e8:	0e 94 65 00 	call	0xca	; 0xca <read_ADC>
  ec:	0e 94 bb 01 	call	0x376	; 0x376 <srand>
	
	UART_printString("** Start generating random number...\n");
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 b3 00 	call	0x166	; 0x166 <UART_printString>
	
	while(1)
	{
		int randomNumber = rand() % 100 + 1;
  f8:	c4 e6       	ldi	r28, 0x64	; 100
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	0e 94 b6 01 	call	0x36c	; 0x36c <rand>
 100:	be 01       	movw	r22, r28
 102:	0e 94 0f 01 	call	0x21e	; 0x21e <__divmodhi4>
		
		UART_print8bitNumber(randomNumber);
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	0e 94 c2 00 	call	0x184	; 0x184 <UART_print8bitNumber>
		UART_transmit('\n');
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	0e 94 ab 00 	call	0x156	; 0x156 <UART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	83 ed       	ldi	r24, 0xD3	; 211
 116:	90 e3       	ldi	r25, 0x30	; 48
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x3a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x44>
 122:	00 00       	nop
 124:	eb cf       	rjmp	.-42     	; 0xfc <main+0x1e>

00000126 <UART_INIT>:
 */ 

#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24

	UBRR0H = 0x00;
 130:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 207;
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C |= 0x06;
 13a:	e2 ec       	ldi	r30, 0xC2	; 194
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	86 60       	ori	r24, 0x06	; 6
 142:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 14e:	80 81       	ld	r24, Z
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <UART_transmit>:
	return UDR0;
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
 156:	e0 ec       	ldi	r30, 0xC0	; 192
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	90 81       	ld	r25, Z
 15c:	95 ff       	sbrs	r25, 5
 15e:	fd cf       	rjmp	.-6      	; 0x15a <UART_transmit+0x4>
	UDR0 = data;
 160:	80 93 c6 00 	sts	0x00C6, r24
 164:	08 95       	ret

00000166 <UART_printString>:
}

void UART_printString(char *str)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)
 16c:	88 81       	ld	r24, Y
 16e:	88 23       	and	r24, r24
 170:	31 f0       	breq	.+12     	; 0x17e <UART_printString+0x18>
 172:	21 96       	adiw	r28, 0x01	; 1
	UART_transmit(str[i]);
 174:	0e 94 ab 00 	call	0x156	; 0x156 <UART_transmit>
	UDR0 = data;
}

void UART_printString(char *str)
{
	for(int i = 0; str[i]; i++)
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	fb cf       	rjmp	.-10     	; 0x174 <UART_printString+0xe>
	UART_transmit(str[i]);
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <UART_print8bitNumber>:

void UART_print8bitNumber(uint8_t no)
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <UART_print8bitNumber+0xa>
 18e:	00 d0       	rcall	.+0      	; 0x190 <UART_print8bitNumber+0xc>
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 194:	40 e3       	ldi	r20, 0x30	; 48
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	49 83       	std	Y+1, r20	; 0x01
 19e:	5a 83       	std	Y+2, r21	; 0x02
 1a0:	6b 83       	std	Y+3, r22	; 0x03
 1a2:	7c 83       	std	Y+4, r23	; 0x04
	int i, index = 0;
	
	if(no > 0){
 1a4:	81 11       	cpse	r24, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <UART_print8bitNumber+0x2a>
}

void UART_print8bitNumber(uint8_t no)
{
	char numString[4] = "0";
	int i, index = 0;
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	22 c0       	rjmp	.+68     	; 0x1f2 <UART_print8bitNumber+0x6e>
 1ae:	fe 01       	movw	r30, r28
 1b0:	31 96       	adiw	r30, 0x01	; 1
	
	if(no > 0){
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 1b6:	4d ec       	ldi	r20, 0xCD	; 205
 1b8:	84 9f       	mul	r24, r20
 1ba:	91 2d       	mov	r25, r1
 1bc:	11 24       	eor	r1, r1
 1be:	96 95       	lsr	r25
 1c0:	96 95       	lsr	r25
 1c2:	96 95       	lsr	r25
 1c4:	29 2f       	mov	r18, r25
 1c6:	22 0f       	add	r18, r18
 1c8:	32 2f       	mov	r19, r18
 1ca:	33 0f       	add	r19, r19
 1cc:	33 0f       	add	r19, r19
 1ce:	23 0f       	add	r18, r19
 1d0:	82 1b       	sub	r24, r18
 1d2:	80 5d       	subi	r24, 0xD0	; 208
 1d4:	81 93       	st	Z+, r24
			no = no / 10;
 1d6:	89 2f       	mov	r24, r25
{
	char numString[4] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 1d8:	98 01       	movw	r18, r16
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	99 23       	and	r25, r25
 1e0:	11 f0       	breq	.+4      	; 0x1e6 <UART_print8bitNumber+0x62>
 1e2:	89 01       	movw	r16, r18
 1e4:	e9 cf       	rjmp	.-46     	; 0x1b8 <UART_print8bitNumber+0x34>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 1e6:	fe 01       	movw	r30, r28
 1e8:	e2 0f       	add	r30, r18
 1ea:	f3 1f       	adc	r31, r19
 1ec:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 1ee:	11 23       	and	r17, r17
 1f0:	6c f0       	brlt	.+26     	; 0x20c <UART_print8bitNumber+0x88>
 1f2:	e1 e0       	ldi	r30, 0x01	; 1
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	e0 0f       	add	r30, r16
 1fc:	f1 1f       	adc	r31, r17
	UART_transmit(numString[i]);
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 ab 00 	call	0x156	; 0x156 <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 204:	01 50       	subi	r16, 0x01	; 1
 206:	11 09       	sbc	r17, r1
 208:	11 23       	and	r17, r17
 20a:	9c f7       	brge	.-26     	; 0x1f2 <UART_print8bitNumber+0x6e>
	UART_transmit(numString[i]);
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <__divmodhi4>:
 21e:	97 fb       	bst	r25, 7
 220:	07 2e       	mov	r0, r23
 222:	16 f4       	brtc	.+4      	; 0x228 <__divmodhi4+0xa>
 224:	00 94       	com	r0
 226:	07 d0       	rcall	.+14     	; 0x236 <__divmodhi4_neg1>
 228:	77 fd       	sbrc	r23, 7
 22a:	09 d0       	rcall	.+18     	; 0x23e <__divmodhi4_neg2>
 22c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__udivmodhi4>
 230:	07 fc       	sbrc	r0, 7
 232:	05 d0       	rcall	.+10     	; 0x23e <__divmodhi4_neg2>
 234:	3e f4       	brtc	.+14     	; 0x244 <__divmodhi4_exit>

00000236 <__divmodhi4_neg1>:
 236:	90 95       	com	r25
 238:	81 95       	neg	r24
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	08 95       	ret

0000023e <__divmodhi4_neg2>:
 23e:	70 95       	com	r23
 240:	61 95       	neg	r22
 242:	7f 4f       	sbci	r23, 0xFF	; 255

00000244 <__divmodhi4_exit>:
 244:	08 95       	ret

00000246 <__udivmodsi4>:
 246:	a1 e2       	ldi	r26, 0x21	; 33
 248:	1a 2e       	mov	r1, r26
 24a:	aa 1b       	sub	r26, r26
 24c:	bb 1b       	sub	r27, r27
 24e:	fd 01       	movw	r30, r26
 250:	0d c0       	rjmp	.+26     	; 0x26c <__udivmodsi4_ep>

00000252 <__udivmodsi4_loop>:
 252:	aa 1f       	adc	r26, r26
 254:	bb 1f       	adc	r27, r27
 256:	ee 1f       	adc	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	a2 17       	cp	r26, r18
 25c:	b3 07       	cpc	r27, r19
 25e:	e4 07       	cpc	r30, r20
 260:	f5 07       	cpc	r31, r21
 262:	20 f0       	brcs	.+8      	; 0x26c <__udivmodsi4_ep>
 264:	a2 1b       	sub	r26, r18
 266:	b3 0b       	sbc	r27, r19
 268:	e4 0b       	sbc	r30, r20
 26a:	f5 0b       	sbc	r31, r21

0000026c <__udivmodsi4_ep>:
 26c:	66 1f       	adc	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	88 1f       	adc	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	1a 94       	dec	r1
 276:	69 f7       	brne	.-38     	; 0x252 <__udivmodsi4_loop>
 278:	60 95       	com	r22
 27a:	70 95       	com	r23
 27c:	80 95       	com	r24
 27e:	90 95       	com	r25
 280:	9b 01       	movw	r18, r22
 282:	ac 01       	movw	r20, r24
 284:	bd 01       	movw	r22, r26
 286:	cf 01       	movw	r24, r30
 288:	08 95       	ret

0000028a <__umulhisi3>:
 28a:	a2 9f       	mul	r26, r18
 28c:	b0 01       	movw	r22, r0
 28e:	b3 9f       	mul	r27, r19
 290:	c0 01       	movw	r24, r0
 292:	a3 9f       	mul	r26, r19
 294:	70 0d       	add	r23, r0
 296:	81 1d       	adc	r24, r1
 298:	11 24       	eor	r1, r1
 29a:	91 1d       	adc	r25, r1
 29c:	b2 9f       	mul	r27, r18
 29e:	70 0d       	add	r23, r0
 2a0:	81 1d       	adc	r24, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	91 1d       	adc	r25, r1
 2a6:	08 95       	ret

000002a8 <__udivmodhi4>:
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	51 e1       	ldi	r21, 0x11	; 17
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <__udivmodhi4_ep>

000002b0 <__udivmodhi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	a6 17       	cp	r26, r22
 2b6:	b7 07       	cpc	r27, r23
 2b8:	10 f0       	brcs	.+4      	; 0x2be <__udivmodhi4_ep>
 2ba:	a6 1b       	sub	r26, r22
 2bc:	b7 0b       	sbc	r27, r23

000002be <__udivmodhi4_ep>:
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	5a 95       	dec	r21
 2c4:	a9 f7       	brne	.-22     	; 0x2b0 <__udivmodhi4_loop>
 2c6:	80 95       	com	r24
 2c8:	90 95       	com	r25
 2ca:	bc 01       	movw	r22, r24
 2cc:	cd 01       	movw	r24, r26
 2ce:	08 95       	ret

000002d0 <do_rand>:
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
 2e6:	68 81       	ld	r22, Y
 2e8:	79 81       	ldd	r23, Y+1	; 0x01
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	9b 81       	ldd	r25, Y+3	; 0x03
 2ee:	61 15       	cp	r22, r1
 2f0:	71 05       	cpc	r23, r1
 2f2:	81 05       	cpc	r24, r1
 2f4:	91 05       	cpc	r25, r1
 2f6:	21 f4       	brne	.+8      	; 0x300 <do_rand+0x30>
 2f8:	64 e2       	ldi	r22, 0x24	; 36
 2fa:	79 ed       	ldi	r23, 0xD9	; 217
 2fc:	8b e5       	ldi	r24, 0x5B	; 91
 2fe:	97 e0       	ldi	r25, 0x07	; 7
 300:	2d e1       	ldi	r18, 0x1D	; 29
 302:	33 ef       	ldi	r19, 0xF3	; 243
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	0e 94 c6 01 	call	0x38c	; 0x38c <__divmodsi4>
 30c:	49 01       	movw	r8, r18
 30e:	5a 01       	movw	r10, r20
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	a7 ea       	ldi	r26, 0xA7	; 167
 316:	b1 e4       	ldi	r27, 0x41	; 65
 318:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__muluhisi3>
 31c:	6b 01       	movw	r12, r22
 31e:	7c 01       	movw	r14, r24
 320:	ac ee       	ldi	r26, 0xEC	; 236
 322:	b4 ef       	ldi	r27, 0xF4	; 244
 324:	a5 01       	movw	r20, r10
 326:	94 01       	movw	r18, r8
 328:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulohisi3>
 32c:	c6 0e       	add	r12, r22
 32e:	d7 1e       	adc	r13, r23
 330:	e8 1e       	adc	r14, r24
 332:	f9 1e       	adc	r15, r25
 334:	f7 fe       	sbrs	r15, 7
 336:	06 c0       	rjmp	.+12     	; 0x344 <do_rand+0x74>
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	c8 1a       	sub	r12, r24
 33c:	d1 08       	sbc	r13, r1
 33e:	e1 08       	sbc	r14, r1
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	f8 0a       	sbc	r15, r24
 344:	c8 82       	st	Y, r12
 346:	d9 82       	std	Y+1, r13	; 0x01
 348:	ea 82       	std	Y+2, r14	; 0x02
 34a:	fb 82       	std	Y+3, r15	; 0x03
 34c:	c6 01       	movw	r24, r12
 34e:	9f 77       	andi	r25, 0x7F	; 127
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	cf 90       	pop	r12
 35c:	bf 90       	pop	r11
 35e:	af 90       	pop	r10
 360:	9f 90       	pop	r9
 362:	8f 90       	pop	r8
 364:	08 95       	ret

00000366 <rand_r>:
 366:	0e 94 68 01 	call	0x2d0	; 0x2d0 <do_rand>
 36a:	08 95       	ret

0000036c <rand>:
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 68 01 	call	0x2d0	; 0x2d0 <do_rand>
 374:	08 95       	ret

00000376 <srand>:
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	80 93 00 01 	sts	0x0100, r24
 37e:	90 93 01 01 	sts	0x0101, r25
 382:	a0 93 02 01 	sts	0x0102, r26
 386:	b0 93 03 01 	sts	0x0103, r27
 38a:	08 95       	ret

0000038c <__divmodsi4>:
 38c:	05 2e       	mov	r0, r21
 38e:	97 fb       	bst	r25, 7
 390:	1e f4       	brtc	.+6      	; 0x398 <__divmodsi4+0xc>
 392:	00 94       	com	r0
 394:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__negsi2>
 398:	57 fd       	sbrc	r21, 7
 39a:	07 d0       	rcall	.+14     	; 0x3aa <__divmodsi4_neg2>
 39c:	0e 94 23 01 	call	0x246	; 0x246 <__udivmodsi4>
 3a0:	07 fc       	sbrc	r0, 7
 3a2:	03 d0       	rcall	.+6      	; 0x3aa <__divmodsi4_neg2>
 3a4:	4e f4       	brtc	.+18     	; 0x3b8 <__divmodsi4_exit>
 3a6:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__negsi2>

000003aa <__divmodsi4_neg2>:
 3aa:	50 95       	com	r21
 3ac:	40 95       	com	r20
 3ae:	30 95       	com	r19
 3b0:	21 95       	neg	r18
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	4f 4f       	sbci	r20, 0xFF	; 255
 3b6:	5f 4f       	sbci	r21, 0xFF	; 255

000003b8 <__divmodsi4_exit>:
 3b8:	08 95       	ret

000003ba <__negsi2>:
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__muluhisi3>:
 3ca:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 3ce:	a5 9f       	mul	r26, r21
 3d0:	90 0d       	add	r25, r0
 3d2:	b4 9f       	mul	r27, r20
 3d4:	90 0d       	add	r25, r0
 3d6:	a4 9f       	mul	r26, r20
 3d8:	80 0d       	add	r24, r0
 3da:	91 1d       	adc	r25, r1
 3dc:	11 24       	eor	r1, r1
 3de:	08 95       	ret

000003e0 <__mulshisi3>:
 3e0:	b7 ff       	sbrs	r27, 7
 3e2:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__muluhisi3>

000003e6 <__mulohisi3>:
 3e6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__muluhisi3>
 3ea:	82 1b       	sub	r24, r18
 3ec:	93 0b       	sbc	r25, r19
 3ee:	08 95       	ret

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
