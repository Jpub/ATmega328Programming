
CH_14_code_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000198  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c6  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000083  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d5  00000000  00000000  00000339  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013d  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000049  00000000  00000000  00000595  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#include <avr/io.h>
#include <avr/interrupt.h>
volatile int count = 0; // 비교일치가 발생한 횟수
int state = 0; // LED 점멸 상태
ISR(TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	count++;
  9e:	80 91 02 01 	lds	r24, 0x0102
  a2:	90 91 03 01 	lds	r25, 0x0103
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 03 01 	sts	0x0103, r25
  ac:	80 93 02 01 	sts	0x0102, r24
	TCNT0 = 0; // 자동으로 0으로 변하지 않는다.
  b0:	16 bc       	out	0x26, r1	; 38
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:
int main(void)
{
	DDRB = 0x20; // PB5 핀을 출력으로 설정
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; // LED는 끈 상태에서 시작
  c4:	15 b8       	out	0x05, r1	; 5
	TCCR0B |= (1 << CS02) | (1 << CS00); // 분주비를 1024로 설정
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	85 60       	ori	r24, 0x05	; 5
  ca:	85 bd       	out	0x25, r24	; 37
	OCR0A = 128; // 비교일치 기준값
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A); // 비교일치 인터럽트 허용
  d0:	ee e6       	ldi	r30, 0x6E	; 110
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
	sei(); // 전역적으로 인터럽트 허용
  da:	78 94       	sei
	while(1){
		if(count == 64){ // 비교일치 64회 발생 = 0.5초 경과
			count = 0; // 카운터 초기화
			state = !state; // LED 상태 반전
  dc:	51 e0       	ldi	r21, 0x01	; 1
  de:	40 e0       	ldi	r20, 0x00	; 0
			if(state) PORTB = 0xFF; // LED 켜기
  e0:	6f ef       	ldi	r22, 0xFF	; 255
	TCCR0B |= (1 << CS02) | (1 << CS00); // 분주비를 1024로 설정
	OCR0A = 128; // 비교일치 기준값
	TIMSK0 |= (1 << OCIE0A); // 비교일치 인터럽트 허용
	sei(); // 전역적으로 인터럽트 허용
	while(1){
		if(count == 64){ // 비교일치 64회 발생 = 0.5초 경과
  e2:	80 91 02 01 	lds	r24, 0x0102
  e6:	90 91 03 01 	lds	r25, 0x0103
  ea:	80 34       	cpi	r24, 0x40	; 64
  ec:	91 05       	cpc	r25, r1
  ee:	c9 f7       	brne	.-14     	; 0xe2 <main+0x22>
			count = 0; // 카운터 초기화
  f0:	10 92 03 01 	sts	0x0103, r1
  f4:	10 92 02 01 	sts	0x0102, r1
			state = !state; // LED 상태 반전
  f8:	85 2f       	mov	r24, r21
  fa:	94 2f       	mov	r25, r20
  fc:	20 91 00 01 	lds	r18, 0x0100
 100:	30 91 01 01 	lds	r19, 0x0101
 104:	23 2b       	or	r18, r19
 106:	11 f0       	breq	.+4      	; 0x10c <main+0x4c>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 01 01 	sts	0x0101, r25
 110:	80 93 00 01 	sts	0x0100, r24
			if(state) PORTB = 0xFF; // LED 켜기
 114:	89 2b       	or	r24, r25
 116:	11 f0       	breq	.+4      	; 0x11c <main+0x5c>
 118:	65 b9       	out	0x05, r22	; 5
 11a:	e3 cf       	rjmp	.-58     	; 0xe2 <main+0x22>
			else PORTB = 0x00; // LED 끄기
 11c:	15 b8       	out	0x05, r1	; 5
 11e:	e1 cf       	rjmp	.-62     	; 0xe2 <main+0x22>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
