
CH_19_code_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000031e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000030e  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000162  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b2  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ff  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000557  00000000  00000000  00000cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  9e:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#define MICROS_INCREMENT_PER_OVERFLOW ( MICROSECONDS_PER_TIMER0_OVERFLOW % 1000 )
// 프로그램 시작 이후의 경과 시간
volatile unsigned long timer0_millis = 0;
volatile int timer0_micros = 0;
ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
	unsigned long m = timer0_millis;
  c8:	00 91 0c 01 	lds	r16, 0x010C
  cc:	10 91 0d 01 	lds	r17, 0x010D
  d0:	20 91 0e 01 	lds	r18, 0x010E
  d4:	30 91 0f 01 	lds	r19, 0x010F
	int f = timer0_micros;
  d8:	80 91 0a 01 	lds	r24, 0x010A
  dc:	90 91 0b 01 	lds	r25, 0x010B
	m += MILLIS_INCREMENT_PER_OVERFLOW; // 밀리초 단위 시간 증가
  e0:	0f 5f       	subi	r16, 0xFF	; 255
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
  e4:	2f 4f       	sbci	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
	f += MICROS_INCREMENT_PER_OVERFLOW; // 마이크로초 단위 시간 증가
  e8:	48 96       	adiw	r24, 0x18	; 24
	// 마이크로초가 1000을 넘어가면 밀리초를 증가시킴
	int micro_to_millis = f / 1000;
  ea:	68 ee       	ldi	r22, 0xE8	; 232
  ec:	73 e0       	ldi	r23, 0x03	; 3
  ee:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
	m += micro_to_millis;
  f2:	ab 01       	movw	r20, r22
  f4:	66 27       	eor	r22, r22
  f6:	57 fd       	sbrc	r21, 7
  f8:	60 95       	com	r22
  fa:	76 2f       	mov	r23, r22
  fc:	04 0f       	add	r16, r20
  fe:	15 1f       	adc	r17, r21
 100:	26 1f       	adc	r18, r22
 102:	37 1f       	adc	r19, r23
	f = f % 1000;
	timer0_millis = m;
 104:	00 93 0c 01 	sts	0x010C, r16
 108:	10 93 0d 01 	sts	0x010D, r17
 10c:	20 93 0e 01 	sts	0x010E, r18
 110:	30 93 0f 01 	sts	0x010F, r19
	timer0_micros = f;
 114:	90 93 0b 01 	sts	0x010B, r25
 118:	80 93 0a 01 	sts	0x010A, r24
}
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <millis>:
unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG; // 상태 레지스터 값 저장
 13e:	2f b7       	in	r18, 0x3f	; 63
	// timer0_millis 값을 읽는 동안
	// timer0_millis 값이 변하지 않도록 인터럽트를 비활성화
	cli();
 140:	f8 94       	cli
	m = timer0_millis;
 142:	60 91 0c 01 	lds	r22, 0x010C
 146:	70 91 0d 01 	lds	r23, 0x010D
 14a:	80 91 0e 01 	lds	r24, 0x010E
 14e:	90 91 0f 01 	lds	r25, 0x010F
	SREG = oldSREG; // 이전 상태 레지스터 값 복원
 152:	2f bf       	out	0x3f, r18	; 63
	return m; // 프로그램 시작 후 경과 시간
}
 154:	08 95       	ret

00000156 <main>:
int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	2a 97       	sbiw	r28, 0x0a	; 10
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
	uint8_t numbers[]
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	de 01       	movw	r26, r28
 172:	11 96       	adiw	r26, 0x01	; 1
 174:	01 90       	ld	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	8a 95       	dec	r24
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x1e>
	= {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	int count = 1000; // 현재 표시할 숫자(0~9)
	int thousands, hundreds, tens, ones;
	TCCR0B |= (1 << CS01) | (1 << CS00); // 분주비를 64로 설정
 17c:	85 b5       	in	r24, 0x25	; 37
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0); // 오버플로 인터럽트 허용
 182:	ee e6       	ldi	r30, 0x6E	; 110
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
	sei(); // 전역적으로 인터럽트 허용
 18c:	78 94       	sei
	unsigned long time_previous, time_current;
	time_previous = millis(); // 시작 시간
 18e:	0e 94 9f 00 	call	0x13e	; 0x13e <millis>
 192:	6b 01       	movw	r12, r22
 194:	7c 01       	movw	r14, r24
	DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	84 b9       	out	0x04, r24	; 4
}
int main(void)
{
	uint8_t numbers[]
	= {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
	int count = 1000; // 현재 표시할 숫자(0~9)
 19e:	08 ee       	ldi	r16, 0xE8	; 232
 1a0:	13 e0       	ldi	r17, 0x03	; 3
	{
		thousands = count / 1000; // 천의 자리
		hundreds = count / 100 % 10; // 백의 자리
		tens = count / 10 % 10; // 십의 자리
		ones = count % 10; // 일의 자리
		PORTB = 0x0E; // 천의 자리 출력
 1a2:	0f 2e       	mov	r0, r31
 1a4:	fe e0       	ldi	r31, 0x0E	; 14
 1a6:	2f 2e       	mov	r2, r31
 1a8:	f0 2d       	mov	r31, r0
	time_previous = millis(); // 시작 시간
	DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
	while(1)
	{
		thousands = count / 1000; // 천의 자리
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f8 ee       	ldi	r31, 0xE8	; 232
 1ae:	6f 2e       	mov	r6, r31
 1b0:	f0 2d       	mov	r31, r0
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f3 e0       	ldi	r31, 0x03	; 3
 1b6:	7f 2e       	mov	r7, r31
 1b8:	f0 2d       	mov	r31, r0
		tens = count / 10 % 10; // 십의 자리
		ones = count % 10; // 일의 자리
		PORTB = 0x0E; // 천의 자리 출력
		PORTD = numbers[thousands];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0D; // 백의 자리 출력
 1ba:	0f 2e       	mov	r0, r31
 1bc:	fd e0       	ldi	r31, 0x0D	; 13
 1be:	3f 2e       	mov	r3, r31
 1c0:	f0 2d       	mov	r31, r0
	DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
	while(1)
	{
		thousands = count / 1000; // 천의 자리
		hundreds = count / 100 % 10; // 백의 자리
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f4 e6       	ldi	r31, 0x64	; 100
 1c6:	af 2e       	mov	r10, r31
 1c8:	b1 2c       	mov	r11, r1
 1ca:	f0 2d       	mov	r31, r0
 1cc:	0f 2e       	mov	r0, r31
 1ce:	fa e0       	ldi	r31, 0x0A	; 10
 1d0:	8f 2e       	mov	r8, r31
 1d2:	91 2c       	mov	r9, r1
 1d4:	f0 2d       	mov	r31, r0
		PORTD = numbers[thousands];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0D; // 백의 자리 출력
		PORTD = numbers[hundreds];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0B; // 십의 자리 출력
 1d6:	0f 2e       	mov	r0, r31
 1d8:	fb e0       	ldi	r31, 0x0B	; 11
 1da:	4f 2e       	mov	r4, r31
 1dc:	f0 2d       	mov	r31, r0
		PORTD = numbers[tens];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x07; // 일의 자리 출력
 1de:	0f 2e       	mov	r0, r31
 1e0:	f7 e0       	ldi	r31, 0x07	; 7
 1e2:	5f 2e       	mov	r5, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <main+0x9a>
		PORTD = numbers[ones];
		_delay_ms(SEGMENT_DELAY);
		time_current = millis(); // 현재 시간
		if(time_current - time_previous > 100){
			time_previous = time_current;
 1e8:	6b 01       	movw	r12, r22
 1ea:	7c 01       	movw	r14, r24
			count++;
			if(count == 10000) count = 1000; // 1000~9999까지 반복
 1ec:	06 2d       	mov	r16, r6
 1ee:	17 2d       	mov	r17, r7
	{
		thousands = count / 1000; // 천의 자리
		hundreds = count / 100 % 10; // 백의 자리
		tens = count / 10 % 10; // 십의 자리
		ones = count % 10; // 일의 자리
		PORTB = 0x0E; // 천의 자리 출력
 1f0:	25 b8       	out	0x05, r2	; 5
	time_previous = millis(); // 시작 시간
	DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
	while(1)
	{
		thousands = count / 1000; // 천의 자리
 1f2:	c8 01       	movw	r24, r16
 1f4:	66 2d       	mov	r22, r6
 1f6:	77 2d       	mov	r23, r7
 1f8:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
		hundreds = count / 100 % 10; // 백의 자리
		tens = count / 10 % 10; // 십의 자리
		ones = count % 10; // 일의 자리
		PORTB = 0x0E; // 천의 자리 출력
		PORTD = numbers[thousands];
 1fc:	e1 e0       	ldi	r30, 0x01	; 1
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	e6 0f       	add	r30, r22
 206:	f7 1f       	adc	r31, r23
 208:	80 81       	ld	r24, Z
 20a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	8f e1       	ldi	r24, 0x1F	; 31
 20e:	9e e4       	ldi	r25, 0x4E	; 78
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0xba>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0xc0>
 216:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0D; // 백의 자리 출력
 218:	35 b8       	out	0x05, r3	; 5
	DDRD = 0xFF; // 세그먼트 제어 핀 8개를 출력으로 설정
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
	while(1)
	{
		thousands = count / 1000; // 천의 자리
		hundreds = count / 100 % 10; // 백의 자리
 21a:	c8 01       	movw	r24, r16
 21c:	b5 01       	movw	r22, r10
 21e:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
 222:	cb 01       	movw	r24, r22
 224:	b4 01       	movw	r22, r8
 226:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
		ones = count % 10; // 일의 자리
		PORTB = 0x0E; // 천의 자리 출력
		PORTD = numbers[thousands];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0D; // 백의 자리 출력
		PORTD = numbers[hundreds];
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	e8 0f       	add	r30, r24
 234:	f9 1f       	adc	r31, r25
 236:	80 81       	ld	r24, Z
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	8f e1       	ldi	r24, 0x1F	; 31
 23c:	9e e4       	ldi	r25, 0x4E	; 78
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0xe8>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0xee>
 244:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0B; // 십의 자리 출력
 246:	45 b8       	out	0x05, r4	; 5
	DDRB = 0x0F; // 자릿수 선택 핀 4개를 출력으로 설정
	while(1)
	{
		thousands = count / 1000; // 천의 자리
		hundreds = count / 100 % 10; // 백의 자리
		tens = count / 10 % 10; // 십의 자리
 248:	c8 01       	movw	r24, r16
 24a:	b4 01       	movw	r22, r8
 24c:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
 250:	cb 01       	movw	r24, r22
 252:	b4 01       	movw	r22, r8
 254:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0D; // 백의 자리 출력
		PORTD = numbers[hundreds];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0B; // 십의 자리 출력
		PORTD = numbers[tens];
 258:	e1 e0       	ldi	r30, 0x01	; 1
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 0f       	add	r30, r28
 25e:	fd 1f       	adc	r31, r29
 260:	e8 0f       	add	r30, r24
 262:	f9 1f       	adc	r31, r25
 264:	80 81       	ld	r24, Z
 266:	8b b9       	out	0x0b, r24	; 11
 268:	8f e1       	ldi	r24, 0x1F	; 31
 26a:	9e e4       	ldi	r25, 0x4E	; 78
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x116>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x11c>
 272:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x07; // 일의 자리 출력
 274:	55 b8       	out	0x05, r5	; 5
	while(1)
	{
		thousands = count / 1000; // 천의 자리
		hundreds = count / 100 % 10; // 백의 자리
		tens = count / 10 % 10; // 십의 자리
		ones = count % 10; // 일의 자리
 276:	c8 01       	movw	r24, r16
 278:	b4 01       	movw	r22, r8
 27a:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x0B; // 십의 자리 출력
		PORTD = numbers[tens];
		_delay_ms(SEGMENT_DELAY);
		PORTB = 0x07; // 일의 자리 출력
		PORTD = numbers[ones];
 27e:	e1 e0       	ldi	r30, 0x01	; 1
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ec 0f       	add	r30, r28
 284:	fd 1f       	adc	r31, r29
 286:	e8 0f       	add	r30, r24
 288:	f9 1f       	adc	r31, r25
 28a:	80 81       	ld	r24, Z
 28c:	8b b9       	out	0x0b, r24	; 11
 28e:	8f e1       	ldi	r24, 0x1F	; 31
 290:	9e e4       	ldi	r25, 0x4E	; 78
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <main+0x13c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x142>
 298:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		time_current = millis(); // 현재 시간
 29a:	0e 94 9f 00 	call	0x13e	; 0x13e <millis>
		if(time_current - time_previous > 100){
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	2c 19       	sub	r18, r12
 2a4:	3d 09       	sbc	r19, r13
 2a6:	4e 09       	sbc	r20, r14
 2a8:	5f 09       	sbc	r21, r15
 2aa:	25 36       	cpi	r18, 0x65	; 101
 2ac:	31 05       	cpc	r19, r1
 2ae:	41 05       	cpc	r20, r1
 2b0:	51 05       	cpc	r21, r1
 2b2:	08 f4       	brcc	.+2      	; 0x2b6 <main+0x160>
 2b4:	9d cf       	rjmp	.-198    	; 0x1f0 <main+0x9a>
			time_previous = time_current;
			count++;
 2b6:	0f 5f       	subi	r16, 0xFF	; 255
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
			if(count == 10000) count = 1000; // 1000~9999까지 반복
 2ba:	00 31       	cpi	r16, 0x10	; 16
 2bc:	27 e2       	ldi	r18, 0x27	; 39
 2be:	12 07       	cpc	r17, r18
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <main+0x16e>
 2c2:	92 cf       	rjmp	.-220    	; 0x1e8 <main+0x92>
		PORTB = 0x07; // 일의 자리 출력
		PORTD = numbers[ones];
		_delay_ms(SEGMENT_DELAY);
		time_current = millis(); // 현재 시간
		if(time_current - time_previous > 100){
			time_previous = time_current;
 2c4:	6b 01       	movw	r12, r22
 2c6:	7c 01       	movw	r14, r24
 2c8:	93 cf       	rjmp	.-218    	; 0x1f0 <main+0x9a>

000002ca <__divmodhi4>:
 2ca:	97 fb       	bst	r25, 7
 2cc:	07 2e       	mov	r0, r23
 2ce:	16 f4       	brtc	.+4      	; 0x2d4 <__divmodhi4+0xa>
 2d0:	00 94       	com	r0
 2d2:	07 d0       	rcall	.+14     	; 0x2e2 <__divmodhi4_neg1>
 2d4:	77 fd       	sbrc	r23, 7
 2d6:	09 d0       	rcall	.+18     	; 0x2ea <__divmodhi4_neg2>
 2d8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__udivmodhi4>
 2dc:	07 fc       	sbrc	r0, 7
 2de:	05 d0       	rcall	.+10     	; 0x2ea <__divmodhi4_neg2>
 2e0:	3e f4       	brtc	.+14     	; 0x2f0 <__divmodhi4_exit>

000002e2 <__divmodhi4_neg1>:
 2e2:	90 95       	com	r25
 2e4:	81 95       	neg	r24
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	08 95       	ret

000002ea <__divmodhi4_neg2>:
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255

000002f0 <__divmodhi4_exit>:
 2f0:	08 95       	ret

000002f2 <__udivmodhi4>:
 2f2:	aa 1b       	sub	r26, r26
 2f4:	bb 1b       	sub	r27, r27
 2f6:	51 e1       	ldi	r21, 0x11	; 17
 2f8:	07 c0       	rjmp	.+14     	; 0x308 <__udivmodhi4_ep>

000002fa <__udivmodhi4_loop>:
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	a6 17       	cp	r26, r22
 300:	b7 07       	cpc	r27, r23
 302:	10 f0       	brcs	.+4      	; 0x308 <__udivmodhi4_ep>
 304:	a6 1b       	sub	r26, r22
 306:	b7 0b       	sbc	r27, r23

00000308 <__udivmodhi4_ep>:
 308:	88 1f       	adc	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	5a 95       	dec	r21
 30e:	a9 f7       	brne	.-22     	; 0x2fa <__udivmodhi4_loop>
 310:	80 95       	com	r24
 312:	90 95       	com	r25
 314:	bc 01       	movw	r22, r24
 316:	cd 01       	movw	r24, r26
 318:	08 95       	ret

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
