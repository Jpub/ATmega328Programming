
CH_11_code_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000078  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003ec  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000258  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002fe  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000134  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000022a  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000047a  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000058  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT_PORT>:
#include <util/delay.h>
#include "UART.h"			// UART 라이브러리 사용

void INIT_PORT(void)
{
	DDRB = 0x20;				// PB5 (디지털 13번 핀) 출력으로 설정
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;				// LED는 꺼진 상태에서 시작
  84:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;				// 버튼 입력
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04;			// PD2 (디지털 2번 핀) 풀업 저항 사용
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11
  8c:	08 95       	ret

0000008e <main>:
}

int main(void)
{
	UART_INIT();				// UART 통신 초기화
  8e:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_INIT>
	INIT_PORT();				// 포트 설정
  92:	0e 94 40 00 	call	0x80	; 0x80 <INIT_PORT>
	int state = 0;				// 현재 버튼의 상태
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
		}
		else{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 ‘*’ 문자 전송
			if(state == 0) UART_transmit('*');
			state = 1;				// 버튼이 눌러진 상태로 표시
			PORTB = 0x20;			// LED 켜기
  9a:	68 94       	set
  9c:	ff 24       	eor	r15, r15
  9e:	f5 f8       	bld	r15, 5
			PORTB = 0x00;			// LED 끄기
		}
		else{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 ‘*’ 문자 전송
			if(state == 0) UART_transmit('*');
			state = 1;				// 버튼이 눌러진 상태로 표시
  a0:	01 e0       	ldi	r16, 0x01	; 1
  a2:	10 e0       	ldi	r17, 0x00	; 0
	INIT_PORT();				// 포트 설정
	int state = 0;				// 현재 버튼의 상태

	while(1){
		if(PIND & 0x04){
			state = 0;				// 버튼이 눌러지지 않은 상태로 표시
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	c0 e0       	ldi	r28, 0x00	; 0
	UART_INIT();				// UART 통신 초기화
	INIT_PORT();				// 포트 설정
	int state = 0;				// 현재 버튼의 상태

	while(1){
		if(PIND & 0x04){
  a8:	4a 9b       	sbis	0x09, 2	; 9
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <main+0x26>
			state = 0;				// 버튼이 눌러지지 않은 상태로 표시
			PORTB = 0x00;			// LED 끄기
  ac:	15 b8       	out	0x05, r1	; 5
	INIT_PORT();				// 포트 설정
	int state = 0;				// 현재 버튼의 상태

	while(1){
		if(PIND & 0x04){
			state = 0;				// 버튼이 눌러지지 않은 상태로 표시
  ae:	8d 2f       	mov	r24, r29
  b0:	9c 2f       	mov	r25, r28
  b2:	fa cf       	rjmp	.-12     	; 0xa8 <main+0x1a>
			PORTB = 0x00;			// LED 끄기
		}
		else{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 ‘*’ 문자 전송
			if(state == 0) UART_transmit('*');
  b4:	89 2b       	or	r24, r25
  b6:	19 f4       	brne	.+6      	; 0xbe <main+0x30>
  b8:	8a e2       	ldi	r24, 0x2A	; 42
  ba:	0e 94 84 00 	call	0x108	; 0x108 <UART_transmit>
			state = 1;				// 버튼이 눌러진 상태로 표시
			PORTB = 0x20;			// LED 켜기
  be:	f5 b8       	out	0x05, r15	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x42>
  d0:	00 00       	nop
			PORTB = 0x00;			// LED 끄기
		}
		else{
			// 눌러지지 않은 상태에서 눌러진 상태로 바뀔 때마다 ‘*’ 문자 전송
			if(state == 0) UART_transmit('*');
			state = 1;				// 버튼이 눌러진 상태로 표시
  d2:	80 2f       	mov	r24, r16
  d4:	91 2f       	mov	r25, r17
  d6:	e8 cf       	rjmp	.-48     	; 0xa8 <main+0x1a>

000000d8 <UART_INIT>:
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
	UART_transmit(numString[i]);
  d8:	e0 ec       	ldi	r30, 0xC0	; 192
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
  e2:	10 92 c5 00 	sts	0x00C5, r1

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);

	UBRR0H = 0x00;
	UBRR0L = 207;
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C |= 0x06;
  ec:	e2 ec       	ldi	r30, 0xC2	; 194
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	86 60       	ori	r24, 0x06	; 6
  f4:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
  f6:	e1 ec       	ldi	r30, 0xC1	; 193
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 100:	80 81       	ld	r24, Z
 102:	88 60       	ori	r24, 0x08	; 8
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <UART_transmit>:
	return UDR0;
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
 108:	e0 ec       	ldi	r30, 0xC0	; 192
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	95 ff       	sbrs	r25, 5
 110:	fd cf       	rjmp	.-6      	; 0x10c <UART_transmit+0x4>
	UDR0 = data;
 112:	80 93 c6 00 	sts	0x00C6, r24
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
