
CH_25_code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000080  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000479  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002a3  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000031d  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000144  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000259  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000004c1  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_INIT>:
#include <util/delay.h>
#include "UART.h"

void ADC_INIT(unsigned char channel)
{
	ADMUX |= 0x40; 			// AVCC를 기준 전압으로 선택
  80:	ac e7       	ldi	r26, 0x7C	; 124
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	9c 91       	ld	r25, X
  86:	90 64       	ori	r25, 0x40	; 64
  88:	9c 93       	st	X, r25
	
	ADCSRA |= 0x07;			// 분주비 설정
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	90 81       	ld	r25, Z
  90:	97 60       	ori	r25, 0x07	; 7
  92:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);		// ADC 활성화
  94:	90 81       	ld	r25, Z
  96:	90 68       	ori	r25, 0x80	; 128
  98:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);		// 자동 트리거 모드
  9a:	90 81       	ld	r25, Z
  9c:	90 62       	ori	r25, 0x20	; 32
  9e:	90 83       	st	Z, r25

	ADMUX |= ((ADMUX & 0xE0) | channel);	// 채널 선택
  a0:	2c 91       	ld	r18, X
  a2:	9c 91       	ld	r25, X
  a4:	90 7e       	andi	r25, 0xE0	; 224
  a6:	92 2b       	or	r25, r18
  a8:	89 2b       	or	r24, r25
  aa:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);		// 변환 시작
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));	// 변환 종료 대기
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	84 ff       	sbrs	r24, 4
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <read_ADC+0x4>
	
	return ADC;				// 10비트 값을 반환
  be:	80 91 78 00 	lds	r24, 0x0078
  c2:	90 91 79 00 	lds	r25, 0x0079
}
  c6:	08 95       	ret

000000c8 <main>:
int main(void)
{
	int read;
	float input_voltage, temperature;
	
	UART_INIT();					// UART 통신 초기화
  c8:	0e 94 96 00 	call	0x12c	; 0x12c <UART_INIT>
	ADC_INIT(1);					// AD 변환기 초기화
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 40 00 	call	0x80	; 0x80 <ADC_INIT>
	
	while(1)
	{
		// 온도 센서의 출력 전압을 ADC를 거쳐 읽는다.
		read = read_ADC();
  d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_ADC>
		
		// 0에서 1023 사이의 값을 0V에서 5V 사이 값으로 변환한다.
		input_voltage = read * 5.0 / 1023.0;
  d6:	bc 01       	movw	r22, r24
  d8:	88 27       	eor	r24, r24
  da:	77 fd       	sbrc	r23, 7
  dc:	80 95       	com	r24
  de:	98 2f       	mov	r25, r24
  e0:	0e 94 bd 01 	call	0x37a	; 0x37a <__floatsisf>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	40 ea       	ldi	r20, 0xA0	; 160
  ea:	50 e4       	ldi	r21, 0x40	; 64
  ec:	0e 94 49 02 	call	0x492	; 0x492 <__mulsf3>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 ec       	ldi	r19, 0xC0	; 192
  f4:	4f e7       	ldi	r20, 0x7F	; 127
  f6:	54 e4       	ldi	r21, 0x44	; 68
  f8:	0e 94 22 01 	call	0x244	; 0x244 <__divsf3>
		
		// 10mV에 1℃이므로 100을 곱해서 현재 온도를 얻는다.
		temperature = input_voltage * 100.0;
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	48 ec       	ldi	r20, 0xC8	; 200
 102:	52 e4       	ldi	r21, 0x42	; 66
 104:	0e 94 49 02 	call	0x492	; 0x492 <__mulsf3>
		
		UART_print16bitNumber((int)temperature);	// 정수값으로 출력
 108:	0e 94 8a 01 	call	0x314	; 0x314 <__fixsfsi>
 10c:	cb 01       	movw	r24, r22
 10e:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_print16bitNumber>
		UART_transmit('\n');				// 줄바꿈
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	0e 94 ae 00 	call	0x15c	; 0x15c <UART_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	83 ed       	ldi	r24, 0xD3	; 211
 11c:	90 e3       	ldi	r25, 0x30	; 48
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x56>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x60>
 128:	00 00       	nop
 12a:	d3 cf       	rjmp	.-90     	; 0xd2 <main+0xa>

0000012c <UART_INIT>:
 */ 

#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24

	UBRR0H = 0x00;
 136:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 207;
 13a:	8f ec       	ldi	r24, 0xCF	; 207
 13c:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C |= 0x06;
 140:	e2 ec       	ldi	r30, 0xC2	; 194
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	86 60       	ori	r24, 0x06	; 6
 148:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
 14a:	e1 ec       	ldi	r30, 0xC1	; 193
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 61       	ori	r24, 0x10	; 16
 152:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <UART_transmit>:
	return UDR0;
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
 15c:	e0 ec       	ldi	r30, 0xC0	; 192
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	90 81       	ld	r25, Z
 162:	95 ff       	sbrs	r25, 5
 164:	fd cf       	rjmp	.-6      	; 0x160 <UART_transmit+0x4>
	UDR0 = data;
 166:	80 93 c6 00 	sts	0x00C6, r24
 16a:	08 95       	ret

0000016c <UART_print16bitNumber>:
	for(i = index; i >= 0; i--)
	UART_transmit(numString[i]);
}

void UART_print16bitNumber(uint16_t no)
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <UART_print16bitNumber+0xa>
 176:	00 d0       	rcall	.+0      	; 0x178 <UART_print16bitNumber+0xc>
 178:	00 d0       	rcall	.+0      	; 0x17a <UART_print16bitNumber+0xe>
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	fc 01       	movw	r30, r24
	char numString[6] = "0";
 180:	40 e3       	ldi	r20, 0x30	; 48
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	49 83       	std	Y+1, r20	; 0x01
 18a:	5a 83       	std	Y+2, r21	; 0x02
 18c:	6b 83       	std	Y+3, r22	; 0x03
 18e:	7c 83       	std	Y+4, r23	; 0x04
 190:	1e 82       	std	Y+6, r1	; 0x06
 192:	1d 82       	std	Y+5, r1	; 0x05
	int i, index = 0;
	
	if(no > 0){
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	19 f4       	brne	.+6      	; 0x19e <UART_print16bitNumber+0x32>
}

void UART_print16bitNumber(uint16_t no)
{
	char numString[6] = "0";
	int i, index = 0;
 198:	00 e0       	ldi	r16, 0x00	; 0
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	3b c0       	rjmp	.+118    	; 0x214 <UART_print16bitNumber+0xa8>
 19e:	ae 01       	movw	r20, r28
 1a0:	4f 5f       	subi	r20, 0xFF	; 255
 1a2:	5f 4f       	sbci	r21, 0xFF	; 255
	
	if(no > 0){
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 1a8:	9f 01       	movw	r18, r30
 1aa:	ad ec       	ldi	r26, 0xCD	; 205
 1ac:	bc ec       	ldi	r27, 0xCC	; 204
 1ae:	0e 94 ac 02 	call	0x558	; 0x558 <__umulhisi3>
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	9c 01       	movw	r18, r24
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	82 0f       	add	r24, r18
 1d2:	93 1f       	adc	r25, r19
 1d4:	9f 01       	movw	r18, r30
 1d6:	28 1b       	sub	r18, r24
 1d8:	39 0b       	sbc	r19, r25
 1da:	c9 01       	movw	r24, r18
 1dc:	80 5d       	subi	r24, 0xD0	; 208
 1de:	da 01       	movw	r26, r20
 1e0:	8d 93       	st	X+, r24
 1e2:	ad 01       	movw	r20, r26
			no = no / 10;
 1e4:	9f 01       	movw	r18, r30
 1e6:	ad ec       	ldi	r26, 0xCD	; 205
 1e8:	bc ec       	ldi	r27, 0xCC	; 204
 1ea:	0e 94 ac 02 	call	0x558	; 0x558 <__umulhisi3>
 1ee:	fc 01       	movw	r30, r24
 1f0:	f6 95       	lsr	r31
 1f2:	e7 95       	ror	r30
 1f4:	f6 95       	lsr	r31
 1f6:	e7 95       	ror	r30
 1f8:	f6 95       	lsr	r31
 1fa:	e7 95       	ror	r30
{
	char numString[6] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 1fc:	c8 01       	movw	r24, r16
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	30 97       	sbiw	r30, 0x00	; 0
 202:	11 f0       	breq	.+4      	; 0x208 <UART_print16bitNumber+0x9c>
 204:	8c 01       	movw	r16, r24
 206:	d0 cf       	rjmp	.-96     	; 0x1a8 <UART_print16bitNumber+0x3c>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 208:	fe 01       	movw	r30, r28
 20a:	e8 0f       	add	r30, r24
 20c:	f9 1f       	adc	r31, r25
 20e:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 210:	11 23       	and	r17, r17
 212:	6c f0       	brlt	.+26     	; 0x22e <UART_print16bitNumber+0xc2>
 214:	e1 e0       	ldi	r30, 0x01	; 1
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	e0 0f       	add	r30, r16
 21e:	f1 1f       	adc	r31, r17
	UART_transmit(numString[i]);
 220:	80 81       	ld	r24, Z
 222:	0e 94 ae 00 	call	0x15c	; 0x15c <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 226:	01 50       	subi	r16, 0x01	; 1
 228:	11 09       	sbc	r17, r1
 22a:	11 23       	and	r17, r17
 22c:	9c f7       	brge	.-26     	; 0x214 <UART_print16bitNumber+0xa8>
	UART_transmit(numString[i]);
}
 22e:	26 96       	adiw	r28, 0x06	; 6
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	08 95       	ret

00000244 <__divsf3>:
 244:	0c d0       	rcall	.+24     	; 0x25e <__divsf3x>
 246:	eb c0       	rjmp	.+470    	; 0x41e <__fp_round>
 248:	e3 d0       	rcall	.+454    	; 0x410 <__fp_pscB>
 24a:	40 f0       	brcs	.+16     	; 0x25c <__divsf3+0x18>
 24c:	da d0       	rcall	.+436    	; 0x402 <__fp_pscA>
 24e:	30 f0       	brcs	.+12     	; 0x25c <__divsf3+0x18>
 250:	21 f4       	brne	.+8      	; 0x25a <__divsf3+0x16>
 252:	5f 3f       	cpi	r21, 0xFF	; 255
 254:	19 f0       	breq	.+6      	; 0x25c <__divsf3+0x18>
 256:	cc c0       	rjmp	.+408    	; 0x3f0 <__fp_inf>
 258:	51 11       	cpse	r21, r1
 25a:	15 c1       	rjmp	.+554    	; 0x486 <__fp_szero>
 25c:	cf c0       	rjmp	.+414    	; 0x3fc <__fp_nan>

0000025e <__divsf3x>:
 25e:	f0 d0       	rcall	.+480    	; 0x440 <__fp_split3>
 260:	98 f3       	brcs	.-26     	; 0x248 <__divsf3+0x4>

00000262 <__divsf3_pse>:
 262:	99 23       	and	r25, r25
 264:	c9 f3       	breq	.-14     	; 0x258 <__divsf3+0x14>
 266:	55 23       	and	r21, r21
 268:	b1 f3       	breq	.-20     	; 0x256 <__divsf3+0x12>
 26a:	95 1b       	sub	r25, r21
 26c:	55 0b       	sbc	r21, r21
 26e:	bb 27       	eor	r27, r27
 270:	aa 27       	eor	r26, r26
 272:	62 17       	cp	r22, r18
 274:	73 07       	cpc	r23, r19
 276:	84 07       	cpc	r24, r20
 278:	38 f0       	brcs	.+14     	; 0x288 <__divsf3_pse+0x26>
 27a:	9f 5f       	subi	r25, 0xFF	; 255
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	44 1f       	adc	r20, r20
 284:	aa 1f       	adc	r26, r26
 286:	a9 f3       	breq	.-22     	; 0x272 <__divsf3_pse+0x10>
 288:	33 d0       	rcall	.+102    	; 0x2f0 <__divsf3_pse+0x8e>
 28a:	0e 2e       	mov	r0, r30
 28c:	3a f0       	brmi	.+14     	; 0x29c <__divsf3_pse+0x3a>
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	30 d0       	rcall	.+96     	; 0x2f2 <__divsf3_pse+0x90>
 292:	91 50       	subi	r25, 0x01	; 1
 294:	50 40       	sbci	r21, 0x00	; 0
 296:	e6 95       	lsr	r30
 298:	00 1c       	adc	r0, r0
 29a:	ca f7       	brpl	.-14     	; 0x28e <__divsf3_pse+0x2c>
 29c:	29 d0       	rcall	.+82     	; 0x2f0 <__divsf3_pse+0x8e>
 29e:	fe 2f       	mov	r31, r30
 2a0:	27 d0       	rcall	.+78     	; 0x2f0 <__divsf3_pse+0x8e>
 2a2:	66 0f       	add	r22, r22
 2a4:	77 1f       	adc	r23, r23
 2a6:	88 1f       	adc	r24, r24
 2a8:	bb 1f       	adc	r27, r27
 2aa:	26 17       	cp	r18, r22
 2ac:	37 07       	cpc	r19, r23
 2ae:	48 07       	cpc	r20, r24
 2b0:	ab 07       	cpc	r26, r27
 2b2:	b0 e8       	ldi	r27, 0x80	; 128
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <__divsf3_pse+0x56>
 2b6:	bb 0b       	sbc	r27, r27
 2b8:	80 2d       	mov	r24, r0
 2ba:	bf 01       	movw	r22, r30
 2bc:	ff 27       	eor	r31, r31
 2be:	93 58       	subi	r25, 0x83	; 131
 2c0:	5f 4f       	sbci	r21, 0xFF	; 255
 2c2:	2a f0       	brmi	.+10     	; 0x2ce <__divsf3_pse+0x6c>
 2c4:	9e 3f       	cpi	r25, 0xFE	; 254
 2c6:	51 05       	cpc	r21, r1
 2c8:	68 f0       	brcs	.+26     	; 0x2e4 <__divsf3_pse+0x82>
 2ca:	92 c0       	rjmp	.+292    	; 0x3f0 <__fp_inf>
 2cc:	dc c0       	rjmp	.+440    	; 0x486 <__fp_szero>
 2ce:	5f 3f       	cpi	r21, 0xFF	; 255
 2d0:	ec f3       	brlt	.-6      	; 0x2cc <__divsf3_pse+0x6a>
 2d2:	98 3e       	cpi	r25, 0xE8	; 232
 2d4:	dc f3       	brlt	.-10     	; 0x2cc <__divsf3_pse+0x6a>
 2d6:	86 95       	lsr	r24
 2d8:	77 95       	ror	r23
 2da:	67 95       	ror	r22
 2dc:	b7 95       	ror	r27
 2de:	f7 95       	ror	r31
 2e0:	9f 5f       	subi	r25, 0xFF	; 255
 2e2:	c9 f7       	brne	.-14     	; 0x2d6 <__divsf3_pse+0x74>
 2e4:	88 0f       	add	r24, r24
 2e6:	91 1d       	adc	r25, r1
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	97 f9       	bld	r25, 7
 2ee:	08 95       	ret
 2f0:	e1 e0       	ldi	r30, 0x01	; 1
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	88 1f       	adc	r24, r24
 2f8:	bb 1f       	adc	r27, r27
 2fa:	62 17       	cp	r22, r18
 2fc:	73 07       	cpc	r23, r19
 2fe:	84 07       	cpc	r24, r20
 300:	ba 07       	cpc	r27, r26
 302:	20 f0       	brcs	.+8      	; 0x30c <__divsf3_pse+0xaa>
 304:	62 1b       	sub	r22, r18
 306:	73 0b       	sbc	r23, r19
 308:	84 0b       	sbc	r24, r20
 30a:	ba 0b       	sbc	r27, r26
 30c:	ee 1f       	adc	r30, r30
 30e:	88 f7       	brcc	.-30     	; 0x2f2 <__divsf3_pse+0x90>
 310:	e0 95       	com	r30
 312:	08 95       	ret

00000314 <__fixsfsi>:
 314:	04 d0       	rcall	.+8      	; 0x31e <__fixunssfsi>
 316:	68 94       	set
 318:	b1 11       	cpse	r27, r1
 31a:	b5 c0       	rjmp	.+362    	; 0x486 <__fp_szero>
 31c:	08 95       	ret

0000031e <__fixunssfsi>:
 31e:	98 d0       	rcall	.+304    	; 0x450 <__fp_splitA>
 320:	88 f0       	brcs	.+34     	; 0x344 <__fixunssfsi+0x26>
 322:	9f 57       	subi	r25, 0x7F	; 127
 324:	90 f0       	brcs	.+36     	; 0x34a <__fixunssfsi+0x2c>
 326:	b9 2f       	mov	r27, r25
 328:	99 27       	eor	r25, r25
 32a:	b7 51       	subi	r27, 0x17	; 23
 32c:	a0 f0       	brcs	.+40     	; 0x356 <__fixunssfsi+0x38>
 32e:	d1 f0       	breq	.+52     	; 0x364 <__fixunssfsi+0x46>
 330:	66 0f       	add	r22, r22
 332:	77 1f       	adc	r23, r23
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	1a f0       	brmi	.+6      	; 0x340 <__fixunssfsi+0x22>
 33a:	ba 95       	dec	r27
 33c:	c9 f7       	brne	.-14     	; 0x330 <__fixunssfsi+0x12>
 33e:	12 c0       	rjmp	.+36     	; 0x364 <__fixunssfsi+0x46>
 340:	b1 30       	cpi	r27, 0x01	; 1
 342:	81 f0       	breq	.+32     	; 0x364 <__fixunssfsi+0x46>
 344:	9f d0       	rcall	.+318    	; 0x484 <__fp_zero>
 346:	b1 e0       	ldi	r27, 0x01	; 1
 348:	08 95       	ret
 34a:	9c c0       	rjmp	.+312    	; 0x484 <__fp_zero>
 34c:	67 2f       	mov	r22, r23
 34e:	78 2f       	mov	r23, r24
 350:	88 27       	eor	r24, r24
 352:	b8 5f       	subi	r27, 0xF8	; 248
 354:	39 f0       	breq	.+14     	; 0x364 <__fixunssfsi+0x46>
 356:	b9 3f       	cpi	r27, 0xF9	; 249
 358:	cc f3       	brlt	.-14     	; 0x34c <__fixunssfsi+0x2e>
 35a:	86 95       	lsr	r24
 35c:	77 95       	ror	r23
 35e:	67 95       	ror	r22
 360:	b3 95       	inc	r27
 362:	d9 f7       	brne	.-10     	; 0x35a <__fixunssfsi+0x3c>
 364:	3e f4       	brtc	.+14     	; 0x374 <__fixunssfsi+0x56>
 366:	90 95       	com	r25
 368:	80 95       	com	r24
 36a:	70 95       	com	r23
 36c:	61 95       	neg	r22
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	8f 4f       	sbci	r24, 0xFF	; 255
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	08 95       	ret

00000376 <__floatunsisf>:
 376:	e8 94       	clt
 378:	09 c0       	rjmp	.+18     	; 0x38c <__floatsisf+0x12>

0000037a <__floatsisf>:
 37a:	97 fb       	bst	r25, 7
 37c:	3e f4       	brtc	.+14     	; 0x38c <__floatsisf+0x12>
 37e:	90 95       	com	r25
 380:	80 95       	com	r24
 382:	70 95       	com	r23
 384:	61 95       	neg	r22
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	8f 4f       	sbci	r24, 0xFF	; 255
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	99 23       	and	r25, r25
 38e:	a9 f0       	breq	.+42     	; 0x3ba <__floatsisf+0x40>
 390:	f9 2f       	mov	r31, r25
 392:	96 e9       	ldi	r25, 0x96	; 150
 394:	bb 27       	eor	r27, r27
 396:	93 95       	inc	r25
 398:	f6 95       	lsr	r31
 39a:	87 95       	ror	r24
 39c:	77 95       	ror	r23
 39e:	67 95       	ror	r22
 3a0:	b7 95       	ror	r27
 3a2:	f1 11       	cpse	r31, r1
 3a4:	f8 cf       	rjmp	.-16     	; 0x396 <__floatsisf+0x1c>
 3a6:	fa f4       	brpl	.+62     	; 0x3e6 <__floatsisf+0x6c>
 3a8:	bb 0f       	add	r27, r27
 3aa:	11 f4       	brne	.+4      	; 0x3b0 <__floatsisf+0x36>
 3ac:	60 ff       	sbrs	r22, 0
 3ae:	1b c0       	rjmp	.+54     	; 0x3e6 <__floatsisf+0x6c>
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8f 4f       	sbci	r24, 0xFF	; 255
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	16 c0       	rjmp	.+44     	; 0x3e6 <__floatsisf+0x6c>
 3ba:	88 23       	and	r24, r24
 3bc:	11 f0       	breq	.+4      	; 0x3c2 <__floatsisf+0x48>
 3be:	96 e9       	ldi	r25, 0x96	; 150
 3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <__floatsisf+0x6a>
 3c2:	77 23       	and	r23, r23
 3c4:	21 f0       	breq	.+8      	; 0x3ce <__floatsisf+0x54>
 3c6:	9e e8       	ldi	r25, 0x8E	; 142
 3c8:	87 2f       	mov	r24, r23
 3ca:	76 2f       	mov	r23, r22
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__floatsisf+0x5e>
 3ce:	66 23       	and	r22, r22
 3d0:	71 f0       	breq	.+28     	; 0x3ee <__floatsisf+0x74>
 3d2:	96 e8       	ldi	r25, 0x86	; 134
 3d4:	86 2f       	mov	r24, r22
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	2a f0       	brmi	.+10     	; 0x3e6 <__floatsisf+0x6c>
 3dc:	9a 95       	dec	r25
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 1f       	adc	r24, r24
 3e4:	da f7       	brpl	.-10     	; 0x3dc <__floatsisf+0x62>
 3e6:	88 0f       	add	r24, r24
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	97 f9       	bld	r25, 7
 3ee:	08 95       	ret

000003f0 <__fp_inf>:
 3f0:	97 f9       	bld	r25, 7
 3f2:	9f 67       	ori	r25, 0x7F	; 127
 3f4:	80 e8       	ldi	r24, 0x80	; 128
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	08 95       	ret

000003fc <__fp_nan>:
 3fc:	9f ef       	ldi	r25, 0xFF	; 255
 3fe:	80 ec       	ldi	r24, 0xC0	; 192
 400:	08 95       	ret

00000402 <__fp_pscA>:
 402:	00 24       	eor	r0, r0
 404:	0a 94       	dec	r0
 406:	16 16       	cp	r1, r22
 408:	17 06       	cpc	r1, r23
 40a:	18 06       	cpc	r1, r24
 40c:	09 06       	cpc	r0, r25
 40e:	08 95       	ret

00000410 <__fp_pscB>:
 410:	00 24       	eor	r0, r0
 412:	0a 94       	dec	r0
 414:	12 16       	cp	r1, r18
 416:	13 06       	cpc	r1, r19
 418:	14 06       	cpc	r1, r20
 41a:	05 06       	cpc	r0, r21
 41c:	08 95       	ret

0000041e <__fp_round>:
 41e:	09 2e       	mov	r0, r25
 420:	03 94       	inc	r0
 422:	00 0c       	add	r0, r0
 424:	11 f4       	brne	.+4      	; 0x42a <__fp_round+0xc>
 426:	88 23       	and	r24, r24
 428:	52 f0       	brmi	.+20     	; 0x43e <__fp_round+0x20>
 42a:	bb 0f       	add	r27, r27
 42c:	40 f4       	brcc	.+16     	; 0x43e <__fp_round+0x20>
 42e:	bf 2b       	or	r27, r31
 430:	11 f4       	brne	.+4      	; 0x436 <__fp_round+0x18>
 432:	60 ff       	sbrs	r22, 0
 434:	04 c0       	rjmp	.+8      	; 0x43e <__fp_round+0x20>
 436:	6f 5f       	subi	r22, 0xFF	; 255
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__fp_split3>:
 440:	57 fd       	sbrc	r21, 7
 442:	90 58       	subi	r25, 0x80	; 128
 444:	44 0f       	add	r20, r20
 446:	55 1f       	adc	r21, r21
 448:	59 f0       	breq	.+22     	; 0x460 <__fp_splitA+0x10>
 44a:	5f 3f       	cpi	r21, 0xFF	; 255
 44c:	71 f0       	breq	.+28     	; 0x46a <__fp_splitA+0x1a>
 44e:	47 95       	ror	r20

00000450 <__fp_splitA>:
 450:	88 0f       	add	r24, r24
 452:	97 fb       	bst	r25, 7
 454:	99 1f       	adc	r25, r25
 456:	61 f0       	breq	.+24     	; 0x470 <__fp_splitA+0x20>
 458:	9f 3f       	cpi	r25, 0xFF	; 255
 45a:	79 f0       	breq	.+30     	; 0x47a <__fp_splitA+0x2a>
 45c:	87 95       	ror	r24
 45e:	08 95       	ret
 460:	12 16       	cp	r1, r18
 462:	13 06       	cpc	r1, r19
 464:	14 06       	cpc	r1, r20
 466:	55 1f       	adc	r21, r21
 468:	f2 cf       	rjmp	.-28     	; 0x44e <__fp_split3+0xe>
 46a:	46 95       	lsr	r20
 46c:	f1 df       	rcall	.-30     	; 0x450 <__fp_splitA>
 46e:	08 c0       	rjmp	.+16     	; 0x480 <__fp_splitA+0x30>
 470:	16 16       	cp	r1, r22
 472:	17 06       	cpc	r1, r23
 474:	18 06       	cpc	r1, r24
 476:	99 1f       	adc	r25, r25
 478:	f1 cf       	rjmp	.-30     	; 0x45c <__fp_splitA+0xc>
 47a:	86 95       	lsr	r24
 47c:	71 05       	cpc	r23, r1
 47e:	61 05       	cpc	r22, r1
 480:	08 94       	sec
 482:	08 95       	ret

00000484 <__fp_zero>:
 484:	e8 94       	clt

00000486 <__fp_szero>:
 486:	bb 27       	eor	r27, r27
 488:	66 27       	eor	r22, r22
 48a:	77 27       	eor	r23, r23
 48c:	cb 01       	movw	r24, r22
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret

00000492 <__mulsf3>:
 492:	0b d0       	rcall	.+22     	; 0x4aa <__mulsf3x>
 494:	c4 cf       	rjmp	.-120    	; 0x41e <__fp_round>
 496:	b5 df       	rcall	.-150    	; 0x402 <__fp_pscA>
 498:	28 f0       	brcs	.+10     	; 0x4a4 <__mulsf3+0x12>
 49a:	ba df       	rcall	.-140    	; 0x410 <__fp_pscB>
 49c:	18 f0       	brcs	.+6      	; 0x4a4 <__mulsf3+0x12>
 49e:	95 23       	and	r25, r21
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__mulsf3+0x12>
 4a2:	a6 cf       	rjmp	.-180    	; 0x3f0 <__fp_inf>
 4a4:	ab cf       	rjmp	.-170    	; 0x3fc <__fp_nan>
 4a6:	11 24       	eor	r1, r1
 4a8:	ee cf       	rjmp	.-36     	; 0x486 <__fp_szero>

000004aa <__mulsf3x>:
 4aa:	ca df       	rcall	.-108    	; 0x440 <__fp_split3>
 4ac:	a0 f3       	brcs	.-24     	; 0x496 <__mulsf3+0x4>

000004ae <__mulsf3_pse>:
 4ae:	95 9f       	mul	r25, r21
 4b0:	d1 f3       	breq	.-12     	; 0x4a6 <__mulsf3+0x14>
 4b2:	95 0f       	add	r25, r21
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	55 1f       	adc	r21, r21
 4b8:	62 9f       	mul	r22, r18
 4ba:	f0 01       	movw	r30, r0
 4bc:	72 9f       	mul	r23, r18
 4be:	bb 27       	eor	r27, r27
 4c0:	f0 0d       	add	r31, r0
 4c2:	b1 1d       	adc	r27, r1
 4c4:	63 9f       	mul	r22, r19
 4c6:	aa 27       	eor	r26, r26
 4c8:	f0 0d       	add	r31, r0
 4ca:	b1 1d       	adc	r27, r1
 4cc:	aa 1f       	adc	r26, r26
 4ce:	64 9f       	mul	r22, r20
 4d0:	66 27       	eor	r22, r22
 4d2:	b0 0d       	add	r27, r0
 4d4:	a1 1d       	adc	r26, r1
 4d6:	66 1f       	adc	r22, r22
 4d8:	82 9f       	mul	r24, r18
 4da:	22 27       	eor	r18, r18
 4dc:	b0 0d       	add	r27, r0
 4de:	a1 1d       	adc	r26, r1
 4e0:	62 1f       	adc	r22, r18
 4e2:	73 9f       	mul	r23, r19
 4e4:	b0 0d       	add	r27, r0
 4e6:	a1 1d       	adc	r26, r1
 4e8:	62 1f       	adc	r22, r18
 4ea:	83 9f       	mul	r24, r19
 4ec:	a0 0d       	add	r26, r0
 4ee:	61 1d       	adc	r22, r1
 4f0:	22 1f       	adc	r18, r18
 4f2:	74 9f       	mul	r23, r20
 4f4:	33 27       	eor	r19, r19
 4f6:	a0 0d       	add	r26, r0
 4f8:	61 1d       	adc	r22, r1
 4fa:	23 1f       	adc	r18, r19
 4fc:	84 9f       	mul	r24, r20
 4fe:	60 0d       	add	r22, r0
 500:	21 1d       	adc	r18, r1
 502:	82 2f       	mov	r24, r18
 504:	76 2f       	mov	r23, r22
 506:	6a 2f       	mov	r22, r26
 508:	11 24       	eor	r1, r1
 50a:	9f 57       	subi	r25, 0x7F	; 127
 50c:	50 40       	sbci	r21, 0x00	; 0
 50e:	8a f0       	brmi	.+34     	; 0x532 <__mulsf3_pse+0x84>
 510:	e1 f0       	breq	.+56     	; 0x54a <__mulsf3_pse+0x9c>
 512:	88 23       	and	r24, r24
 514:	4a f0       	brmi	.+18     	; 0x528 <__mulsf3_pse+0x7a>
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	bb 1f       	adc	r27, r27
 51c:	66 1f       	adc	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	88 1f       	adc	r24, r24
 522:	91 50       	subi	r25, 0x01	; 1
 524:	50 40       	sbci	r21, 0x00	; 0
 526:	a9 f7       	brne	.-22     	; 0x512 <__mulsf3_pse+0x64>
 528:	9e 3f       	cpi	r25, 0xFE	; 254
 52a:	51 05       	cpc	r21, r1
 52c:	70 f0       	brcs	.+28     	; 0x54a <__mulsf3_pse+0x9c>
 52e:	60 cf       	rjmp	.-320    	; 0x3f0 <__fp_inf>
 530:	aa cf       	rjmp	.-172    	; 0x486 <__fp_szero>
 532:	5f 3f       	cpi	r21, 0xFF	; 255
 534:	ec f3       	brlt	.-6      	; 0x530 <__mulsf3_pse+0x82>
 536:	98 3e       	cpi	r25, 0xE8	; 232
 538:	dc f3       	brlt	.-10     	; 0x530 <__mulsf3_pse+0x82>
 53a:	86 95       	lsr	r24
 53c:	77 95       	ror	r23
 53e:	67 95       	ror	r22
 540:	b7 95       	ror	r27
 542:	f7 95       	ror	r31
 544:	e7 95       	ror	r30
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	c1 f7       	brne	.-16     	; 0x53a <__mulsf3_pse+0x8c>
 54a:	fe 2b       	or	r31, r30
 54c:	88 0f       	add	r24, r24
 54e:	91 1d       	adc	r25, r1
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	97 f9       	bld	r25, 7
 556:	08 95       	ret

00000558 <__umulhisi3>:
 558:	a2 9f       	mul	r26, r18
 55a:	b0 01       	movw	r22, r0
 55c:	b3 9f       	mul	r27, r19
 55e:	c0 01       	movw	r24, r0
 560:	a3 9f       	mul	r26, r19
 562:	70 0d       	add	r23, r0
 564:	81 1d       	adc	r24, r1
 566:	11 24       	eor	r1, r1
 568:	91 1d       	adc	r25, r1
 56a:	b2 9f       	mul	r27, r18
 56c:	70 0d       	add	r23, r0
 56e:	81 1d       	adc	r24, r1
 570:	11 24       	eor	r1, r1
 572:	91 1d       	adc	r25, r1
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
