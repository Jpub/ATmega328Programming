
CH_13_code_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000dc  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008e  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ef  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000146  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003c  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_5>:
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#include <avr/interrupt.h>
ISR(PCINT2_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
	if(PIND & 0x04) PORTB = 0x00; // LED 끄기
  8c:	4a 9b       	sbis	0x09, 2	; 9
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__vector_5+0x14>
  90:	15 b8       	out	0x05, r1	; 5
  92:	02 c0       	rjmp	.+4      	; 0x98 <__vector_5+0x18>
	else PORTB = 0x20; // LED 켜기
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	85 b9       	out	0x05, r24	; 5
}
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <INIT_PORT>:
void INIT_PORT(void)
{
	DDRB = 0x20; // PB5 (디지털 13번 핀) 출력으로 설정
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; // LED는 꺼진 상태에서 시작
  a8:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00; // 버튼 입력
  aa:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04; // PD2 (디지털 2번 핀) 풀업 저항 사용
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret

000000b2 <INIT_PCINT2>:
}
void INIT_PCINT2(void)
{
	PCICR |= (1 << PCIE2); // PCINT2 인터럽트 활성화
  b2:	e8 e6       	ldi	r30, 0x68	; 104
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT18); // PD2 핀의 핀 변화 인터럽트 허용
  bc:	ed e6       	ldi	r30, 0x6D	; 109
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	80 83       	st	Z, r24
	sei(); // 전역적으로 인터럽트 허용
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <main>:
}
int main(void)
{
	INIT_PORT(); // 포트 설정
  ca:	0e 94 52 00 	call	0xa4	; 0xa4 <INIT_PORT>
	INIT_PCINT2(); // PCINT2 인터럽트 설정
  ce:	0e 94 59 00 	call	0xb2	; 0xb2 <INIT_PCINT2>
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x8>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
