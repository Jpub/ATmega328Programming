
CH_24_code_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001f0  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000139  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000018e  00000000  00000000  000004f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000074  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001bb  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f7  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_74595>:
void Init_74595(void)
{
	// data pin   : 아두이노 11, PB3
	// latch clock pin   : 아두이노 12, PB4
	// shift clock pin   : 아두이노 13, PB5
	DDRB |= 0b00111000; // 제어 핀 3개를 출력으로 설정
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 63       	ori	r24, 0x38	; 56
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <ShiftClock>:
}
void ShiftClock(void)
{
	PORTB |= 0b00100000; // 이동 클록을 HIGH로
  88:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= 0b11011111; // 이동 클록을 LOW로
  8a:	2d 98       	cbi	0x05, 5	; 5
  8c:	08 95       	ret

0000008e <LatchClock>:
}
void LatchClock(void)
{
	PORTB |= 0b00010000; // 래치 클록을 HIGH로
  8e:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= 0b11101111; // 래치 클록을 LOW로
  90:	2c 98       	cbi	0x05, 4	; 5
  92:	08 95       	ret

00000094 <WordDataWrite>:
}
void WordDataWrite(uint16_t data) // 2바이트 데이터 출력
{
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
  9c:	10 e1       	ldi	r17, 0x10	; 16
	for(uint8_t i = 0; i < 16; i++){
		if(data & 0x8000) // MSB부터 1비트 출력
  9e:	dd 23       	and	r29, r29
  a0:	14 f4       	brge	.+4      	; 0xa6 <WordDataWrite+0x12>
		PORTB |= 0b00001000;
  a2:	2b 9a       	sbi	0x05, 3	; 5
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <WordDataWrite+0x14>
		else
		PORTB &= 0b11110111;
  a6:	2b 98       	cbi	0x05, 3	; 5
		ShiftClock(); // 1비트 출력 후 비트 이동
  a8:	0e 94 44 00 	call	0x88	; 0x88 <ShiftClock>
		data = data << 1; // 다음 출력할 비트를 MSB로 이동
  ac:	cc 0f       	add	r28, r28
  ae:	dd 1f       	adc	r29, r29
  b0:	11 50       	subi	r17, 0x01	; 1
	PORTB |= 0b00010000; // 래치 클록을 HIGH로
	PORTB &= 0b11101111; // 래치 클록을 LOW로
}
void WordDataWrite(uint16_t data) // 2바이트 데이터 출력
{
	for(uint8_t i = 0; i < 16; i++){
  b2:	a9 f7       	brne	.-22     	; 0x9e <WordDataWrite+0xa>
		else
		PORTB &= 0b11110111;
		ShiftClock(); // 1비트 출력 후 비트 이동
		data = data << 1; // 다음 출력할 비트를 MSB로 이동
	}
	LatchClock(); // 2바이트 전달 후 실제 출력 발생
  b4:	0e 94 47 00 	call	0x8e	; 0x8e <LatchClock>
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	08 95       	ret

000000c0 <main>:
int main(void)
{
	uint8_t index = 0;
	Init_74595(); // 74595 초기화
  c0:	0e 94 40 00 	call	0x80	; 0x80 <Init_74595>
	}
	LatchClock(); // 2바이트 전달 후 실제 출력 발생
}
int main(void)
{
	uint8_t index = 0;
  c4:	10 e0       	ldi	r17, 0x00	; 0
	Init_74595(); // 74595 초기화
	while(1)
	{
		uint16_t pattern = 0x0001 << index; // 출력 패턴 결정
  c6:	c1 e0       	ldi	r28, 0x01	; 1
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	81 2f       	mov	r24, r17
  cc:	90 e0       	ldi	r25, 0x00	; 0
		index = (index + 1) % 16; // 출력 패턴에서의 위치 결정
  ce:	9c 01       	movw	r18, r24
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	2f 70       	andi	r18, 0x0F	; 15
  d6:	30 78       	andi	r19, 0x80	; 128
  d8:	12 2f       	mov	r17, r18
		WordDataWrite(pattern); // 워드 데이터 출력
  da:	9e 01       	movw	r18, r28
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x22>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x1e>
  e6:	c9 01       	movw	r24, r18
  e8:	0e 94 4a 00 	call	0x94	; 0x94 <WordDataWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	3f ef       	ldi	r19, 0xFF	; 255
  ee:	83 ec       	ldi	r24, 0xC3	; 195
  f0:	99 e0       	ldi	r25, 0x09	; 9
  f2:	31 50       	subi	r19, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x32>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x3c>
  fc:	00 00       	nop
  fe:	e5 cf       	rjmp	.-54     	; 0xca <main+0xa>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
