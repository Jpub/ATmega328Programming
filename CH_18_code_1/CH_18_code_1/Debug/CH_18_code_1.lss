
CH_18_code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000422  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000265  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002dd  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000124  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000224  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000004bd  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00001361  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(int argc, char *argv[])
{
	char data = '0';

	UART_INIT();				// UART 통신 초기화
  80:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_INIT>
	while (1) {
		UART_transmit(data++);		// 카운터 값을 컴퓨터로 전달
  84:	80 e3       	ldi	r24, 0x30	; 48
  86:	0e 94 77 00 	call	0xee	; 0xee <UART_transmit>
		UART_transmit('\n');			// 줄바꿈
  8a:	8a e0       	ldi	r24, 0x0A	; 10
  8c:	0e 94 77 00 	call	0xee	; 0xee <UART_transmit>
{
	char data = '0';

	UART_INIT();				// UART 통신 초기화
	while (1) {
		UART_transmit(data++);		// 카운터 값을 컴퓨터로 전달
  90:	81 e3       	ldi	r24, 0x31	; 49
  92:	01 c0       	rjmp	.+2      	; 0x96 <main+0x16>
		UART_transmit('\n');			// 줄바꿈
		
		if(data > '9') data = '0';
  94:	80 e3       	ldi	r24, 0x30	; 48
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	33 ed       	ldi	r19, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
{
	char data = '0';

	UART_INIT();				// UART 통신 초기화
	while (1) {
		UART_transmit(data++);		// 카운터 값을 컴퓨터로 전달
  a8:	c1 e0       	ldi	r28, 0x01	; 1
  aa:	c8 0f       	add	r28, r24
  ac:	0e 94 77 00 	call	0xee	; 0xee <UART_transmit>
		UART_transmit('\n');			// 줄바꿈
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	0e 94 77 00 	call	0xee	; 0xee <UART_transmit>
		
		if(data > '9') data = '0';
  b6:	ca 33       	cpi	r28, 0x3A	; 58
  b8:	68 f7       	brcc	.-38     	; 0x94 <main+0x14>
{
	char data = '0';

	UART_INIT();				// UART 통신 초기화
	while (1) {
		UART_transmit(data++);		// 카운터 값을 컴퓨터로 전달
  ba:	8c 2f       	mov	r24, r28
  bc:	ec cf       	rjmp	.-40     	; 0x96 <main+0x16>

000000be <UART_INIT>:
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
	UART_transmit(numString[i]);
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	80 83       	st	Z, r24
  c8:	10 92 c5 00 	sts	0x00C5, r1
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	80 93 c4 00 	sts	0x00C4, r24
  d2:	e2 ec       	ldi	r30, 0xC2	; 194
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	86 60       	ori	r24, 0x06	; 6
  da:	80 83       	st	Z, r24
  dc:	e1 ec       	ldi	r30, 0xC1	; 193
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	80 83       	st	Z, r24
	UBRR0L = 207;

	UCSR0C |= 0x06;
	
	UCSR0B |= _BV(RXEN0);
	UCSR0B |= _BV(TXEN0);
  e6:	80 81       	ld	r24, Z
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <UART_transmit>:
	return UDR0;
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
  ee:	e0 ec       	ldi	r30, 0xC0	; 192
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	95 ff       	sbrs	r25, 5
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <UART_transmit+0x4>
	UDR0 = data;
  f8:	80 93 c6 00 	sts	0x00C6, r24
  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
