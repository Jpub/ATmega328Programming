
CH_9_code_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000146  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e7  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014c  00000000  00000000  000003af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016d  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  0000068d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000006b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRD = 0xFF; // PORT D의 8개 핀을 출력으로 설정
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	while(1)
	{
		for(int i = 0; i < 8; i++){
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
			char p1 = 0x01 << i; // 왼쪽에서 오른쪽으로 움직이는 LED
			char p2 = 0x01 << (7 - i); // 오른쪽에서 왼쪽으로 움직이는 LED
  88:	e7 e0       	ldi	r30, 0x07	; 7
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
int main(void)
{
	DDRD = 0xFF; // PORT D의 8개 핀을 출력으로 설정
	while(1)
	{
		for(int i = 0; i < 8; i++){
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	a0 e0       	ldi	r26, 0x00	; 0
			char p1 = 0x01 << i; // 왼쪽에서 오른쪽으로 움직이는 LED
			char p2 = 0x01 << (7 - i); // 오른쪽에서 왼쪽으로 움직이는 LED
  94:	bf 01       	movw	r22, r30
  96:	68 1b       	sub	r22, r24
  98:	79 0b       	sbc	r23, r25
  9a:	a9 01       	movw	r20, r18
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x22>
  9e:	44 0f       	add	r20, r20
  a0:	55 1f       	adc	r21, r21
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <main+0x1e>
  a6:	ba 01       	movw	r22, r20
{
	DDRD = 0xFF; // PORT D의 8개 핀을 출력으로 설정
	while(1)
	{
		for(int i = 0; i < 8; i++){
			char p1 = 0x01 << i; // 왼쪽에서 오른쪽으로 움직이는 LED
  a8:	a9 01       	movw	r20, r18
  aa:	08 2e       	mov	r0, r24
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x32>
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <main+0x2e>
			char p2 = 0x01 << (7 - i); // 오른쪽에서 왼쪽으로 움직이는 LED
			PORTD = p1 | p2; // 2개의 LED 결합
  b6:	46 2b       	or	r20, r22
  b8:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	5f ef       	ldi	r21, 0xFF	; 255
  bc:	63 ed       	ldi	r22, 0xD3	; 211
  be:	40 e3       	ldi	r20, 0x30	; 48
  c0:	51 50       	subi	r21, 0x01	; 1
  c2:	60 40       	sbci	r22, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
int main(void)
{
	DDRD = 0xFF; // PORT D의 8개 핀을 출력으로 설정
	while(1)
	{
		for(int i = 0; i < 8; i++){
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	91 05       	cpc	r25, r1
  d2:	04 f3       	brlt	.-64     	; 0x94 <main+0x14>
  d4:	8b 2f       	mov	r24, r27
  d6:	9a 2f       	mov	r25, r26
  d8:	dd cf       	rjmp	.-70     	; 0x94 <main+0x14>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
