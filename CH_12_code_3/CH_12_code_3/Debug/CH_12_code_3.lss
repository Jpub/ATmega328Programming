
CH_12_code_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000156  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000120  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000108  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015f  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000007c  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000783  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_INIT>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_INIT(unsigned char channel)
{
	ADMUX |= 0x40; 			// AVCC를 기준 전압으로 선택
  80:	ac e7       	ldi	r26, 0x7C	; 124
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	9c 91       	ld	r25, X
  86:	90 64       	ori	r25, 0x40	; 64
  88:	9c 93       	st	X, r25
	
	ADCSRA |= 0x07;			// 분주비 설정
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	90 81       	ld	r25, Z
  90:	97 60       	ori	r25, 0x07	; 7
  92:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);		// ADC 활성화
  94:	90 81       	ld	r25, Z
  96:	90 68       	ori	r25, 0x80	; 128
  98:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADATE);		// 자동 트리거 모드
  9a:	90 81       	ld	r25, Z
  9c:	90 62       	ori	r25, 0x20	; 32
  9e:	90 83       	st	Z, r25

	ADMUX |= ((ADMUX & 0xE0) | channel);	// 채널 선택
  a0:	2c 91       	ld	r18, X
  a2:	9c 91       	ld	r25, X
  a4:	90 7e       	andi	r25, 0xE0	; 224
  a6:	92 2b       	or	r25, r18
  a8:	89 2b       	or	r24, r25
  aa:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);		// 변환 시작
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));	// 변환 종료 대기
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	84 ff       	sbrs	r24, 4
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <read_ADC+0x4>
	
	return ADC;				// 10비트 값을 반환
  be:	80 91 78 00 	lds	r24, 0x0078
  c2:	90 91 79 00 	lds	r25, 0x0079
}
  c6:	08 95       	ret

000000c8 <main>:
int main(void)
{
	int value;
	uint8_t on_off;
	
	ADC_INIT(0);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 40 00 	call	0x80	; 0x80 <ADC_INIT>
	return ADC;				// 10비트 값을 반환
}

void PORT_INIT(void)
{
	DDRD = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a b9       	out	0x0a, r24	; 10
	
	while(1)
	{
		value = read_ADC() >> 7;
		
		on_off = 0;
  d2:	10 e0       	ldi	r17, 0x00	; 0
		for(int i = 0; i <= value; i++){
  d4:	f1 2c       	mov	r15, r1
  d6:	00 e0       	ldi	r16, 0x00	; 0
			on_off |= (0x01 << i);
  d8:	c1 e0       	ldi	r28, 0x01	; 1
  da:	d0 e0       	ldi	r29, 0x00	; 0
	ADC_INIT(0);
	PORT_INIT();
	
	while(1)
	{
		value = read_ADC() >> 7;
  dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_ADC>
  e0:	88 0f       	add	r24, r24
  e2:	89 2f       	mov	r24, r25
  e4:	88 1f       	adc	r24, r24
  e6:	99 0b       	sbc	r25, r25
		
		on_off = 0;
		for(int i = 0; i <= value; i++){
  e8:	99 23       	and	r25, r25
  ea:	8c f0       	brlt	.+34     	; 0x10e <main+0x46>
  ec:	2f 2d       	mov	r18, r15
  ee:	30 2f       	mov	r19, r16
	
	while(1)
	{
		value = read_ADC() >> 7;
		
		on_off = 0;
  f0:	61 2f       	mov	r22, r17
		for(int i = 0; i <= value; i++){
			on_off |= (0x01 << i);
  f2:	ae 01       	movw	r20, r28
  f4:	02 2e       	mov	r0, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x34>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <main+0x30>
 100:	64 2b       	or	r22, r20
	while(1)
	{
		value = read_ADC() >> 7;
		
		on_off = 0;
		for(int i = 0; i <= value; i++){
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	82 17       	cp	r24, r18
 108:	93 07       	cpc	r25, r19
 10a:	9c f7       	brge	.-26     	; 0xf2 <main+0x2a>
 10c:	01 c0       	rjmp	.+2      	; 0x110 <main+0x48>
	
	while(1)
	{
		value = read_ADC() >> 7;
		
		on_off = 0;
 10e:	61 2f       	mov	r22, r17
		for(int i = 0; i <= value; i++){
			on_off |= (0x01 << i);
		}
		PORTD = on_off;
 110:	6b b9       	out	0x0b, r22	; 11
	}
 112:	e4 cf       	rjmp	.-56     	; 0xdc <main+0x14>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
