
CH_16_code_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c8  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000006f3  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000003a1  00000000  00000000  00000a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003ef  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000001dc  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000284  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000636  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b0  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 89 00 	call	0x112	; 0x112 <main>
  78:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_Init>:
 */ 

#include "25LC010.h"

void SPI_Init(void) {
	DDRB |= (1 << SPI_SS);			// SS 핀을 출력으로 설정
  80:	22 9a       	sbi	0x04, 2	; 4
	// SS핀은 HIGH로 설정하여 EEPROM이 선택되지 않은 상태로 시작
	PORTB |= (1 << SPI_SS);
  82:	2a 9a       	sbi	0x05, 2	; 5

	DDRB |= (1 << SPI_MOSI);		// MOSI 핀을 출력으로 설정
  84:	23 9a       	sbi	0x04, 3	; 4
	DDRB &= ~(1 << SPI_MISO);		// MISO 핀을 입력으로 설정
  86:	24 98       	cbi	0x04, 4	; 4
	DDRB |= (1 << SPI_SCK);		// SCK 핀을 출력으로 설정
  88:	25 9a       	sbi	0x04, 5	; 4

	SPCR |= (1 << MSTR);			// 마스터 모드
  8a:	8c b5       	in	r24, 0x2c	; 44
  8c:	80 61       	ori	r24, 0x10	; 16
  8e:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPE);			// SPI 활성화
  90:	8c b5       	in	r24, 0x2c	; 44
  92:	80 64       	ori	r24, 0x40	; 64
  94:	8c bd       	out	0x2c, r24	; 44
  96:	08 95       	ret

00000098 <EEPROM_changeByte>:
}

void EEPROM_changeByte(uint8_t byte) {
	SPDR = byte;				// 데이터 전송 시작
  98:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);	// 전송 완료 대기
  9a:	0d b4       	in	r0, 0x2d	; 45
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <EEPROM_changeByte+0x2>
}
  a0:	08 95       	ret

000000a2 <EEPROM_readByte>:

void EEPROM_sendAddress(uint8_t address) {
	EEPROM_changeByte(address);
}

uint8_t EEPROM_readByte(uint8_t address) {
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
	EEPROM_Select();			// EEPROM 선택
  a6:	2a 98       	cbi	0x05, 2	; 5
	EEPROM_changeByte(EEPROM_READ);	// 읽기 명령어 전송
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	SPDR = byte;				// 데이터 전송 시작
	loop_until_bit_is_set(SPSR, SPIF);	// 전송 완료 대기
}

void EEPROM_sendAddress(uint8_t address) {
	EEPROM_changeByte(address);
  ae:	8c 2f       	mov	r24, r28
  b0:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	EEPROM_Select();			// EEPROM 선택
	EEPROM_changeByte(EEPROM_READ);	// 읽기 명령어 전송
	EEPROM_sendAddress(address);		// 메모리 주소 전송
	// 마스터에서 바이트 값을 전송하여야 슬레이브로부터 바이트 값을 받을 수 있다.
	// 전송하는 값은 의미가 없으므로 0을 전송한다.
	EEPROM_changeByte(0);
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	EEPROM_DeSelect();			// EEPROM 선택 해제
  ba:	2a 9a       	sbi	0x05, 2	; 5

	return SPDR;
  bc:	8e b5       	in	r24, 0x2e	; 46
}
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <EEPROM_writeEnable>:

void EEPROM_writeEnable(void) {
	EEPROM_Select();			// Slave Select를 LOW로
  c2:	2a 98       	cbi	0x05, 2	; 5
	EEPROM_changeByte(EEPROM_WREN);	// 쓰기 가능하도록 설정
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	EEPROM_DeSelect();			// Slave Select를 HIGH로
  ca:	2a 9a       	sbi	0x05, 2	; 5
  cc:	08 95       	ret

000000ce <EEPROM_readStatus>:
	// 쓰기가 완료될 때까지 대기
	while (EEPROM_readStatus() & _BV(EEPROM_WRITE_IN_PROGRESS));
}

uint8_t EEPROM_readStatus(void) {
	EEPROM_Select();			// EEPROM 선택
  ce:	2a 98       	cbi	0x05, 2	; 5
	EEPROM_changeByte(EEPROM_RDSR);	// 상태 레지스터 읽기 명령 전송
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	EEPROM_changeByte(0);		// 상태 레지스터 값 읽기
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	EEPROM_DeSelect();			// EEPROM 선택 해제
  dc:	2a 9a       	sbi	0x05, 2	; 5

	return SPDR;
  de:	8e b5       	in	r24, 0x2e	; 46
}
  e0:	08 95       	ret

000000e2 <EEPROM_writeByte>:
	EEPROM_Select();			// Slave Select를 LOW로
	EEPROM_changeByte(EEPROM_WREN);	// 쓰기 가능하도록 설정
	EEPROM_DeSelect();			// Slave Select를 HIGH로
}

void EEPROM_writeByte(uint8_t address, uint8_t data) {
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	d8 2f       	mov	r29, r24
  e8:	c6 2f       	mov	r28, r22
	EEPROM_writeEnable();			// 쓰기 가능 모드로 설정
  ea:	0e 94 61 00 	call	0xc2	; 0xc2 <EEPROM_writeEnable>

	EEPROM_Select();			// EEPROM 선택
  ee:	2a 98       	cbi	0x05, 2	; 5
	EEPROM_changeByte(EEPROM_WRITE);	// 쓰기 명령 전송
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	SPDR = byte;				// 데이터 전송 시작
	loop_until_bit_is_set(SPSR, SPIF);	// 전송 완료 대기
}

void EEPROM_sendAddress(uint8_t address) {
	EEPROM_changeByte(address);
  f6:	8d 2f       	mov	r24, r29
  f8:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	EEPROM_writeEnable();			// 쓰기 가능 모드로 설정

	EEPROM_Select();			// EEPROM 선택
	EEPROM_changeByte(EEPROM_WRITE);	// 쓰기 명령 전송
	EEPROM_sendAddress(address);		// 주소 전송
	EEPROM_changeByte(data);		// 데이터 전송
  fc:	8c 2f       	mov	r24, r28
  fe:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_changeByte>
	EEPROM_DeSelect();			// EEPROM 선택 해제
 102:	2a 9a       	sbi	0x05, 2	; 5

	// 쓰기가 완료될 때까지 대기
	while (EEPROM_readStatus() & _BV(EEPROM_WRITE_IN_PROGRESS));
 104:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_readStatus>
 108:	80 fd       	sbrc	r24, 0
 10a:	fc cf       	rjmp	.-8      	; 0x104 <EEPROM_writeByte+0x22>
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <main>:
#include "25LC010.h"

int main(void) {
	uint8_t i;
	
	SPI_Init();					// SPI 초기화
 112:	0e 94 40 00 	call	0x80	; 0x80 <SPI_Init>
	UART_INIT();				// UART 초기화
 116:	0e 94 a2 00 	call	0x144	; 0x144 <UART_INIT>

	for(i = 0; i < 128; i++)			// EEPROM에 쓰기
 11a:	c0 e0       	ldi	r28, 0x00	; 0
	EEPROM_writeByte(i, i);
 11c:	6c 2f       	mov	r22, r28
 11e:	8c 2f       	mov	r24, r28
 120:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_writeByte>
	uint8_t i;
	
	SPI_Init();					// SPI 초기화
	UART_INIT();				// UART 초기화

	for(i = 0; i < 128; i++)			// EEPROM에 쓰기
 124:	cf 5f       	subi	r28, 0xFF	; 255
 126:	c0 38       	cpi	r28, 0x80	; 128
 128:	c9 f7       	brne	.-14     	; 0x11c <main+0xa>
 12a:	c0 e0       	ldi	r28, 0x00	; 0
	EEPROM_writeByte(i, i);
	
	for(i = 0; i < 128; i++){			// EEPROM에서 읽기
		UART_print8bitNumber(EEPROM_readByte(i));
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_readByte>
 132:	0e 94 c2 00 	call	0x184	; 0x184 <UART_print8bitNumber>
		UART_transmit('\n');
 136:	8a e0       	ldi	r24, 0x0A	; 10
 138:	0e 94 ba 00 	call	0x174	; 0x174 <UART_transmit>
	UART_INIT();				// UART 초기화

	for(i = 0; i < 128; i++)			// EEPROM에 쓰기
	EEPROM_writeByte(i, i);
	
	for(i = 0; i < 128; i++){			// EEPROM에서 읽기
 13c:	cf 5f       	subi	r28, 0xFF	; 255
 13e:	c0 38       	cpi	r28, 0x80	; 128
 140:	a9 f7       	brne	.-22     	; 0x12c <main+0x1a>
 142:	ff cf       	rjmp	.-2      	; 0x142 <main+0x30>

00000144 <UART_INIT>:
 */ 

#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
 144:	e0 ec       	ldi	r30, 0xC0	; 192
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24

	UBRR0H = 0x00;
 14e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 207;
 152:	8f ec       	ldi	r24, 0xCF	; 207
 154:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C |= 0x06;
 158:	e2 ec       	ldi	r30, 0xC2	; 194
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
 162:	e1 ec       	ldi	r30, 0xC1	; 193
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 16c:	80 81       	ld	r24, Z
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <UART_transmit>:
	return UDR0;
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
 174:	e0 ec       	ldi	r30, 0xC0	; 192
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	90 81       	ld	r25, Z
 17a:	95 ff       	sbrs	r25, 5
 17c:	fd cf       	rjmp	.-6      	; 0x178 <UART_transmit+0x4>
	UDR0 = data;
 17e:	80 93 c6 00 	sts	0x00C6, r24
 182:	08 95       	ret

00000184 <UART_print8bitNumber>:
	for(int i = 0; str[i]; i++)
	UART_transmit(str[i]);
}

void UART_print8bitNumber(uint8_t no)
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <UART_print8bitNumber+0xa>
 18e:	00 d0       	rcall	.+0      	; 0x190 <UART_print8bitNumber+0xc>
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 194:	40 e3       	ldi	r20, 0x30	; 48
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	49 83       	std	Y+1, r20	; 0x01
 19e:	5a 83       	std	Y+2, r21	; 0x02
 1a0:	6b 83       	std	Y+3, r22	; 0x03
 1a2:	7c 83       	std	Y+4, r23	; 0x04
	int i, index = 0;
	
	if(no > 0){
 1a4:	81 11       	cpse	r24, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <UART_print8bitNumber+0x2a>
}

void UART_print8bitNumber(uint8_t no)
{
	char numString[4] = "0";
	int i, index = 0;
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	22 c0       	rjmp	.+68     	; 0x1f2 <UART_print8bitNumber+0x6e>
 1ae:	fe 01       	movw	r30, r28
 1b0:	31 96       	adiw	r30, 0x01	; 1
	
	if(no > 0){
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 1b6:	4d ec       	ldi	r20, 0xCD	; 205
 1b8:	84 9f       	mul	r24, r20
 1ba:	91 2d       	mov	r25, r1
 1bc:	11 24       	eor	r1, r1
 1be:	96 95       	lsr	r25
 1c0:	96 95       	lsr	r25
 1c2:	96 95       	lsr	r25
 1c4:	29 2f       	mov	r18, r25
 1c6:	22 0f       	add	r18, r18
 1c8:	32 2f       	mov	r19, r18
 1ca:	33 0f       	add	r19, r19
 1cc:	33 0f       	add	r19, r19
 1ce:	23 0f       	add	r18, r19
 1d0:	82 1b       	sub	r24, r18
 1d2:	80 5d       	subi	r24, 0xD0	; 208
 1d4:	81 93       	st	Z+, r24
			no = no / 10;
 1d6:	89 2f       	mov	r24, r25
{
	char numString[4] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 1d8:	98 01       	movw	r18, r16
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	99 23       	and	r25, r25
 1e0:	11 f0       	breq	.+4      	; 0x1e6 <UART_print8bitNumber+0x62>
 1e2:	89 01       	movw	r16, r18
 1e4:	e9 cf       	rjmp	.-46     	; 0x1b8 <UART_print8bitNumber+0x34>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 1e6:	fe 01       	movw	r30, r28
 1e8:	e2 0f       	add	r30, r18
 1ea:	f3 1f       	adc	r31, r19
 1ec:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 1ee:	11 23       	and	r17, r17
 1f0:	6c f0       	brlt	.+26     	; 0x20c <UART_print8bitNumber+0x88>
 1f2:	e1 e0       	ldi	r30, 0x01	; 1
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	e0 0f       	add	r30, r16
 1fc:	f1 1f       	adc	r31, r17
	UART_transmit(numString[i]);
 1fe:	80 81       	ld	r24, Z
 200:	0e 94 ba 00 	call	0x174	; 0x174 <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 204:	01 50       	subi	r16, 0x01	; 1
 206:	11 09       	sbc	r17, r1
 208:	11 23       	and	r17, r17
 20a:	9c f7       	brge	.-26     	; 0x1f2 <UART_print8bitNumber+0x6e>
	UART_transmit(numString[i]);
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
