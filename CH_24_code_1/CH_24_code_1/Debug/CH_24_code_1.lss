
CH_24_code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e1  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000139  00000000  00000000  0000039f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000192  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b2  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c9  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5d 00 	call	0xba	; 0xba <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_74595>:
void Init_74595(void)
{
	// data pin 		: 아두이노 11, PB3
	// latch clock pin 	: 아두이노 12, PB4
	// shift clock pin 	: 아두이노 13, PB5
	DDRB |= 0b00111000;			// 제어핀 3개를 출력으로 설정
  80:	84 b1       	in	r24, 0x04	; 4
  82:	88 63       	ori	r24, 0x38	; 56
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <ShiftClock>:
}

void ShiftClock(void)
{
	PORTB |= 0b00100000;			// 이동 클록을 HIGH로
  88:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= 0b11011111;			// 이동 클록을 LOW로
  8a:	2d 98       	cbi	0x05, 5	; 5
  8c:	08 95       	ret

0000008e <LatchClock>:
}

void LatchClock(void)
{
	PORTB |= 0b00010000;			// 래치 클록을 HIGH로
  8e:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= 0b11101111;			// 래치 클록을 LOW로
  90:	2c 98       	cbi	0x05, 4	; 5
  92:	08 95       	ret

00000094 <ByteDataWrite>:
}

void ByteDataWrite(uint8_t data)		// 1 바이트 데이터 출력
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	d8 2f       	mov	r29, r24
  9a:	c8 e0       	ldi	r28, 0x08	; 8
	for(uint8_t i = 0; i < 8; i++){
		if(data & 0b10000000) 		// MSB부터 1비트 출력
  9c:	dd 23       	and	r29, r29
  9e:	14 f4       	brge	.+4      	; 0xa4 <ByteDataWrite+0x10>
		PORTB |= 0b00001000;
  a0:	2b 9a       	sbi	0x05, 3	; 5
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <ByteDataWrite+0x12>
		else
		PORTB &= 0b11110111;
  a4:	2b 98       	cbi	0x05, 3	; 5
		
		ShiftClock();				// 1비트 출력 후 비트 이동
  a6:	0e 94 44 00 	call	0x88	; 0x88 <ShiftClock>
		data = data << 1;			// 다음 출력할 비트를 MSB로 이동
  aa:	dd 0f       	add	r29, r29
  ac:	c1 50       	subi	r28, 0x01	; 1
	PORTB &= 0b11101111;			// 래치 클록을 LOW로
}

void ByteDataWrite(uint8_t data)		// 1 바이트 데이터 출력
{
	for(uint8_t i = 0; i < 8; i++){
  ae:	b1 f7       	brne	.-20     	; 0x9c <ByteDataWrite+0x8>
		
		ShiftClock();				// 1비트 출력 후 비트 이동
		data = data << 1;			// 다음 출력할 비트를 MSB로 이동
	}
	
	LatchClock();				// 1바이트 전달 후 실제 출력 발생
  b0:	0e 94 47 00 	call	0x8e	; 0x8e <LatchClock>
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <main>:

int main(void)
{
	uint8_t index = 0;
	
	Init_74595();				// 74595 초기화
  ba:	0e 94 40 00 	call	0x80	; 0x80 <Init_74595>
	LatchClock();				// 1바이트 전달 후 실제 출력 발생
}

int main(void)
{
	uint8_t index = 0;
  be:	c0 e0       	ldi	r28, 0x00	; 0
	
	Init_74595();				// 74595 초기화
	
	while(1)
	{
		uint8_t pattern = 1 << index;		// 출력 패턴 결정
  c0:	d1 e0       	ldi	r29, 0x01	; 1
  c2:	8c 2f       	mov	r24, r28
  c4:	90 e0       	ldi	r25, 0x00	; 0
		index = (index + 1) % 8;		// 출력 패턴에서의 위치 결정
  c6:	9c 01       	movw	r18, r24
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	27 70       	andi	r18, 0x07	; 7
  ce:	30 78       	andi	r19, 0x80	; 128
  d0:	c2 2f       	mov	r28, r18
		
		ByteDataWrite(pattern);		// 바이트 데이터 출력
  d2:	2d 2f       	mov	r18, r29
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x1e>
  d6:	22 0f       	add	r18, r18
  d8:	8a 95       	dec	r24
  da:	ea f7       	brpl	.-6      	; 0xd6 <main+0x1c>
  dc:	82 2f       	mov	r24, r18
  de:	0e 94 4a 00 	call	0x94	; 0x94 <ByteDataWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	93 ec       	ldi	r25, 0xC3	; 195
  e6:	29 e0       	ldi	r18, 0x09	; 9
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	20 40       	sbci	r18, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x2e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x38>
  f2:	00 00       	nop
  f4:	e6 cf       	rjmp	.-52     	; 0xc2 <main+0x8>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
