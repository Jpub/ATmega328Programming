
CH_27_code_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000054a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000771  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000263  00000000  00000000  00000df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000035c  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d1  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004e3  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a3 02 	jmp	0x546	; 0x546 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <avr/eeprom.h>
#include "UART.h"
int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0x8>
  9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0xa>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	// EEPROM에 쓸 데이터
	uint8_t dataByte = 1;
	uint16_t dataWord = 2;
	uint32_t dataDWord = 3;
	char dataString[] = "ABCDE";
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	e3 e2       	ldi	r30, 0x23	; 35
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	de 01       	movw	r26, r28
  ac:	11 96       	adiw	r26, 0x01	; 1
  ae:	01 90       	ld	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	8a 95       	dec	r24
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x18>
	// EEPROM의 주소
	int addressByte = 0, addressWord = 10, addressDWord = 20, addressString = 30;
	UART_INIT(); // UART 통신 초기화
  b6:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_INIT>
	// 데이터 쓰기
	eeprom_update_byte ( (uint8_t *)addressByte, dataByte * 10);
  ba:	6a e0       	ldi	r22, 0x0A	; 10
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__eeupd_byte_m328p>
	eeprom_update_word ( (uint16_t *)addressWord, dataWord * 10);
  c4:	64 e1       	ldi	r22, 0x14	; 20
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 9d 02 	call	0x53a	; 0x53a <__eeupd_word_m328p>
	eeprom_update_dword ( (uint32_t *)addressDWord, dataDWord * 10);
  d0:	4e e1       	ldi	r20, 0x1E	; 30
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	84 e1       	ldi	r24, 0x14	; 20
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 91 02 	call	0x522	; 0x522 <__eeupd_dword_m328p>
	eeprom_update_block ( (void *)dataString, (void *)addressString, 5);
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	6e e1       	ldi	r22, 0x1E	; 30
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 6f 02 	call	0x4de	; 0x4de <__eeupd_block_m328p>
	// 데이터 읽기
	dataByte = eeprom_read_byte ( (uint8_t *)addressByte );
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__eerd_byte_m328p>
  f8:	b8 2e       	mov	r11, r24
	dataWord = eeprom_read_word ( (uint16_t *)addressWord );
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__eerd_word_m328p>
 102:	8c 01       	movw	r16, r24
	dataDWord = eeprom_read_dword ( (uint32_t *)addressDWord );
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__eerd_dword_m328p>
 10c:	6b 01       	movw	r12, r22
 10e:	7c 01       	movw	r14, r24
	eeprom_read_block ( (void *)dataString, (void *)addressString, 5);
 110:	45 e0       	ldi	r20, 0x05	; 5
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	6e e1       	ldi	r22, 0x1E	; 30
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 4b 02 	call	0x496	; 0x496 <__eerd_block_m328p>
	// UART 통신으로 데이터 전송
	UART_printString("Byte : "); // 1바이트 데이터
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_print8bitNumber(dataByte);
 128:	8b 2d       	mov	r24, r11
 12a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <UART_print8bitNumber>
	UART_printString("\n");
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_printString("Word : "); // 2바이트 데이터
 136:	81 e1       	ldi	r24, 0x11	; 17
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_print16bitNumber(dataWord);
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 3b 01 	call	0x276	; 0x276 <UART_print16bitNumber>
	UART_printString("\n");
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_printString("Double Word : "); // 4바이트 데이터
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_print32bitNumber(dataDWord);
 154:	c7 01       	movw	r24, r14
 156:	b6 01       	movw	r22, r12
 158:	0e 94 a7 01 	call	0x34e	; 0x34e <UART_print32bitNumber>
	UART_printString("\n");
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_printString("String : "); // 문자열 데이터
 164:	89 e1       	ldi	r24, 0x19	; 25
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_printString(dataString);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
	UART_printString("\n");
 174:	88 e0       	ldi	r24, 0x08	; 8
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 df 00 	call	0x1be	; 0x1be <UART_printString>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0xe6>

0000017e <UART_INIT>:
 */ 

#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);
 17e:	e0 ec       	ldi	r30, 0xC0	; 192
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 83       	st	Z, r24

	UBRR0H = 0x00;
 188:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 207;
 18c:	8f ec       	ldi	r24, 0xCF	; 207
 18e:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C |= 0x06;
 192:	e2 ec       	ldi	r30, 0xC2	; 194
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	86 60       	ori	r24, 0x06	; 6
 19a:	80 83       	st	Z, r24
	
	UCSR0B |= _BV(RXEN0);
 19c:	e1 ec       	ldi	r30, 0xC1	; 193
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <UART_transmit>:
	return UDR0;
}

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
 1ae:	e0 ec       	ldi	r30, 0xC0	; 192
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	90 81       	ld	r25, Z
 1b4:	95 ff       	sbrs	r25, 5
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <UART_transmit+0x4>
	UDR0 = data;
 1b8:	80 93 c6 00 	sts	0x00C6, r24
 1bc:	08 95       	ret

000001be <UART_printString>:
}

void UART_printString(char *str)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
	for(int i = 0; str[i]; i++)
 1c4:	88 81       	ld	r24, Y
 1c6:	88 23       	and	r24, r24
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <UART_printString+0x18>
 1ca:	21 96       	adiw	r28, 0x01	; 1
	UART_transmit(str[i]);
 1cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_transmit>
	UDR0 = data;
}

void UART_printString(char *str)
{
	for(int i = 0; str[i]; i++)
 1d0:	89 91       	ld	r24, Y+
 1d2:	81 11       	cpse	r24, r1
 1d4:	fb cf       	rjmp	.-10     	; 0x1cc <UART_printString+0xe>
	UART_transmit(str[i]);
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <UART_print8bitNumber>:

void UART_print8bitNumber(uint8_t no)
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <UART_print8bitNumber+0xa>
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <UART_print8bitNumber+0xc>
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
	char numString[4] = "0";
 1ec:	40 e3       	ldi	r20, 0x30	; 48
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	49 83       	std	Y+1, r20	; 0x01
 1f6:	5a 83       	std	Y+2, r21	; 0x02
 1f8:	6b 83       	std	Y+3, r22	; 0x03
 1fa:	7c 83       	std	Y+4, r23	; 0x04
	int i, index = 0;
	
	if(no > 0){
 1fc:	81 11       	cpse	r24, r1
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <UART_print8bitNumber+0x2a>
}

void UART_print8bitNumber(uint8_t no)
{
	char numString[4] = "0";
	int i, index = 0;
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	22 c0       	rjmp	.+68     	; 0x24a <UART_print8bitNumber+0x6e>
 206:	fe 01       	movw	r30, r28
 208:	31 96       	adiw	r30, 0x01	; 1
	
	if(no > 0){
 20a:	00 e0       	ldi	r16, 0x00	; 0
 20c:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 20e:	4d ec       	ldi	r20, 0xCD	; 205
 210:	84 9f       	mul	r24, r20
 212:	91 2d       	mov	r25, r1
 214:	11 24       	eor	r1, r1
 216:	96 95       	lsr	r25
 218:	96 95       	lsr	r25
 21a:	96 95       	lsr	r25
 21c:	29 2f       	mov	r18, r25
 21e:	22 0f       	add	r18, r18
 220:	32 2f       	mov	r19, r18
 222:	33 0f       	add	r19, r19
 224:	33 0f       	add	r19, r19
 226:	23 0f       	add	r18, r19
 228:	82 1b       	sub	r24, r18
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	81 93       	st	Z+, r24
			no = no / 10;
 22e:	89 2f       	mov	r24, r25
{
	char numString[4] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 230:	98 01       	movw	r18, r16
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	99 23       	and	r25, r25
 238:	11 f0       	breq	.+4      	; 0x23e <UART_print8bitNumber+0x62>
 23a:	89 01       	movw	r16, r18
 23c:	e9 cf       	rjmp	.-46     	; 0x210 <UART_print8bitNumber+0x34>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 23e:	fe 01       	movw	r30, r28
 240:	e2 0f       	add	r30, r18
 242:	f3 1f       	adc	r31, r19
 244:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 246:	11 23       	and	r17, r17
 248:	6c f0       	brlt	.+26     	; 0x264 <UART_print8bitNumber+0x88>
 24a:	e1 e0       	ldi	r30, 0x01	; 1
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ec 0f       	add	r30, r28
 250:	fd 1f       	adc	r31, r29
 252:	e0 0f       	add	r30, r16
 254:	f1 1f       	adc	r31, r17
	UART_transmit(numString[i]);
 256:	80 81       	ld	r24, Z
 258:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 25c:	01 50       	subi	r16, 0x01	; 1
 25e:	11 09       	sbc	r17, r1
 260:	11 23       	and	r17, r17
 262:	9c f7       	brge	.-26     	; 0x24a <UART_print8bitNumber+0x6e>
	UART_transmit(numString[i]);
}
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <UART_print16bitNumber>:

void UART_print16bitNumber(uint16_t no)
{
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	00 d0       	rcall	.+0      	; 0x280 <UART_print16bitNumber+0xa>
 280:	00 d0       	rcall	.+0      	; 0x282 <UART_print16bitNumber+0xc>
 282:	00 d0       	rcall	.+0      	; 0x284 <UART_print16bitNumber+0xe>
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	fc 01       	movw	r30, r24
	char numString[6] = "0";
 28a:	40 e3       	ldi	r20, 0x30	; 48
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	49 83       	std	Y+1, r20	; 0x01
 294:	5a 83       	std	Y+2, r21	; 0x02
 296:	6b 83       	std	Y+3, r22	; 0x03
 298:	7c 83       	std	Y+4, r23	; 0x04
 29a:	1e 82       	std	Y+6, r1	; 0x06
 29c:	1d 82       	std	Y+5, r1	; 0x05
	int i, index = 0;
	
	if(no > 0){
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <UART_print16bitNumber+0x32>
}

void UART_print16bitNumber(uint16_t no)
{
	char numString[6] = "0";
	int i, index = 0;
 2a2:	00 e0       	ldi	r16, 0x00	; 0
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	3b c0       	rjmp	.+118    	; 0x31e <UART_print16bitNumber+0xa8>
 2a8:	ae 01       	movw	r20, r28
 2aa:	4f 5f       	subi	r20, 0xFF	; 255
 2ac:	5f 4f       	sbci	r21, 0xFF	; 255
	
	if(no > 0){
 2ae:	00 e0       	ldi	r16, 0x00	; 0
 2b0:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 2b2:	9f 01       	movw	r18, r30
 2b4:	ad ec       	ldi	r26, 0xCD	; 205
 2b6:	bc ec       	ldi	r27, 0xCC	; 204
 2b8:	0e 94 3c 02 	call	0x478	; 0x478 <__umulhisi3>
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	9c 01       	movw	r18, r24
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	82 0f       	add	r24, r18
 2dc:	93 1f       	adc	r25, r19
 2de:	9f 01       	movw	r18, r30
 2e0:	28 1b       	sub	r18, r24
 2e2:	39 0b       	sbc	r19, r25
 2e4:	c9 01       	movw	r24, r18
 2e6:	80 5d       	subi	r24, 0xD0	; 208
 2e8:	da 01       	movw	r26, r20
 2ea:	8d 93       	st	X+, r24
 2ec:	ad 01       	movw	r20, r26
			no = no / 10;
 2ee:	9f 01       	movw	r18, r30
 2f0:	ad ec       	ldi	r26, 0xCD	; 205
 2f2:	bc ec       	ldi	r27, 0xCC	; 204
 2f4:	0e 94 3c 02 	call	0x478	; 0x478 <__umulhisi3>
 2f8:	fc 01       	movw	r30, r24
 2fa:	f6 95       	lsr	r31
 2fc:	e7 95       	ror	r30
 2fe:	f6 95       	lsr	r31
 300:	e7 95       	ror	r30
 302:	f6 95       	lsr	r31
 304:	e7 95       	ror	r30
{
	char numString[6] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 306:	c8 01       	movw	r24, r16
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	30 97       	sbiw	r30, 0x00	; 0
 30c:	11 f0       	breq	.+4      	; 0x312 <UART_print16bitNumber+0x9c>
 30e:	8c 01       	movw	r16, r24
 310:	d0 cf       	rjmp	.-96     	; 0x2b2 <UART_print16bitNumber+0x3c>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 312:	fe 01       	movw	r30, r28
 314:	e8 0f       	add	r30, r24
 316:	f9 1f       	adc	r31, r25
 318:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 31a:	11 23       	and	r17, r17
 31c:	6c f0       	brlt	.+26     	; 0x338 <UART_print16bitNumber+0xc2>
 31e:	e1 e0       	ldi	r30, 0x01	; 1
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ec 0f       	add	r30, r28
 324:	fd 1f       	adc	r31, r29
 326:	e0 0f       	add	r30, r16
 328:	f1 1f       	adc	r31, r17
	UART_transmit(numString[i]);
 32a:	80 81       	ld	r24, Z
 32c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 330:	01 50       	subi	r16, 0x01	; 1
 332:	11 09       	sbc	r17, r1
 334:	11 23       	and	r17, r17
 336:	9c f7       	brge	.-26     	; 0x31e <UART_print16bitNumber+0xa8>
	UART_transmit(numString[i]);
}
 338:	26 96       	adiw	r28, 0x06	; 6
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <UART_print32bitNumber>:

void UART_print32bitNumber(uint32_t no)
{
 34e:	8f 92       	push	r8
 350:	9f 92       	push	r9
 352:	af 92       	push	r10
 354:	bf 92       	push	r11
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	2b 97       	sbiw	r28, 0x0b	; 11
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
	char numString[11] = "0";
 372:	00 e3       	ldi	r16, 0x30	; 48
 374:	10 e0       	ldi	r17, 0x00	; 0
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	09 83       	std	Y+1, r16	; 0x01
 37c:	1a 83       	std	Y+2, r17	; 0x02
 37e:	2b 83       	std	Y+3, r18	; 0x03
 380:	3c 83       	std	Y+4, r19	; 0x04
 382:	fe 01       	movw	r30, r28
 384:	35 96       	adiw	r30, 0x05	; 5
 386:	27 e0       	ldi	r18, 0x07	; 7
 388:	df 01       	movw	r26, r30
 38a:	1d 92       	st	X+, r1
 38c:	2a 95       	dec	r18
 38e:	e9 f7       	brne	.-6      	; 0x38a <UART_print32bitNumber+0x3c>
	int i, index = 0;
	
	if(no > 0){
 390:	61 15       	cp	r22, r1
 392:	71 05       	cpc	r23, r1
 394:	81 05       	cpc	r24, r1
 396:	91 05       	cpc	r25, r1
 398:	49 f4       	brne	.+18     	; 0x3ac <UART_print32bitNumber+0x5e>
}

void UART_print32bitNumber(uint32_t no)
{
	char numString[11] = "0";
	int i, index = 0;
 39a:	00 e0       	ldi	r16, 0x00	; 0
 39c:	10 e0       	ldi	r17, 0x00	; 0
 39e:	ce 01       	movw	r24, r28
 3a0:	80 0f       	add	r24, r16
 3a2:	91 1f       	adc	r25, r17
 3a4:	fc 01       	movw	r30, r24
 3a6:	32 96       	adiw	r30, 0x02	; 2
 3a8:	7f 01       	movw	r14, r30
 3aa:	2a c0       	rjmp	.+84     	; 0x400 <UART_print32bitNumber+0xb2>
 3ac:	9e 01       	movw	r18, r28
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	79 01       	movw	r14, r18
	
	if(no > 0){
 3b4:	00 e0       	ldi	r16, 0x00	; 0
 3b6:	10 e0       	ldi	r17, 0x00	; 0
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
 3b8:	0f 2e       	mov	r0, r31
 3ba:	fa e0       	ldi	r31, 0x0A	; 10
 3bc:	8f 2e       	mov	r8, r31
 3be:	91 2c       	mov	r9, r1
 3c0:	a1 2c       	mov	r10, r1
 3c2:	b1 2c       	mov	r11, r1
 3c4:	f0 2d       	mov	r31, r0
 3c6:	a5 01       	movw	r20, r10
 3c8:	94 01       	movw	r18, r8
 3ca:	0e 94 1a 02 	call	0x434	; 0x434 <__udivmodsi4>
 3ce:	60 5d       	subi	r22, 0xD0	; 208
 3d0:	d7 01       	movw	r26, r14
 3d2:	6d 93       	st	X+, r22
 3d4:	7d 01       	movw	r14, r26
			no = no / 10;
 3d6:	62 2f       	mov	r22, r18
 3d8:	73 2f       	mov	r23, r19
 3da:	84 2f       	mov	r24, r20
 3dc:	95 2f       	mov	r25, r21
{
	char numString[11] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
 3de:	98 01       	movw	r18, r16
 3e0:	2f 5f       	subi	r18, 0xFF	; 255
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	81 05       	cpc	r24, r1
 3ea:	91 05       	cpc	r25, r1
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <UART_print32bitNumber+0xa4>
 3ee:	89 01       	movw	r16, r18
 3f0:	ea cf       	rjmp	.-44     	; 0x3c6 <UART_print32bitNumber+0x78>
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
 3f2:	fe 01       	movw	r30, r28
 3f4:	e2 0f       	add	r30, r18
 3f6:	f3 1f       	adc	r31, r19
 3f8:	11 82       	std	Z+1, r1	; 0x01
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 3fa:	11 23       	and	r17, r17
 3fc:	84 f6       	brge	.-96     	; 0x39e <UART_print32bitNumber+0x50>
 3fe:	09 c0       	rjmp	.+18     	; 0x412 <UART_print32bitNumber+0xc4>
	UART_transmit(numString[i]);
 400:	f7 01       	movw	r30, r14
 402:	82 91       	ld	r24, -Z
 404:	7f 01       	movw	r14, r30
 406:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_transmit>
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
 40a:	01 50       	subi	r16, 0x01	; 1
 40c:	11 09       	sbc	r17, r1
 40e:	11 23       	and	r17, r17
 410:	bc f7       	brge	.-18     	; 0x400 <UART_print32bitNumber+0xb2>
	UART_transmit(numString[i]);
 412:	2b 96       	adiw	r28, 0x0b	; 11
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	bf 90       	pop	r11
 42c:	af 90       	pop	r10
 42e:	9f 90       	pop	r9
 430:	8f 90       	pop	r8
 432:	08 95       	ret

00000434 <__udivmodsi4>:
 434:	a1 e2       	ldi	r26, 0x21	; 33
 436:	1a 2e       	mov	r1, r26
 438:	aa 1b       	sub	r26, r26
 43a:	bb 1b       	sub	r27, r27
 43c:	fd 01       	movw	r30, r26
 43e:	0d c0       	rjmp	.+26     	; 0x45a <__udivmodsi4_ep>

00000440 <__udivmodsi4_loop>:
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	ee 1f       	adc	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	a2 17       	cp	r26, r18
 44a:	b3 07       	cpc	r27, r19
 44c:	e4 07       	cpc	r30, r20
 44e:	f5 07       	cpc	r31, r21
 450:	20 f0       	brcs	.+8      	; 0x45a <__udivmodsi4_ep>
 452:	a2 1b       	sub	r26, r18
 454:	b3 0b       	sbc	r27, r19
 456:	e4 0b       	sbc	r30, r20
 458:	f5 0b       	sbc	r31, r21

0000045a <__udivmodsi4_ep>:
 45a:	66 1f       	adc	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	1a 94       	dec	r1
 464:	69 f7       	brne	.-38     	; 0x440 <__udivmodsi4_loop>
 466:	60 95       	com	r22
 468:	70 95       	com	r23
 46a:	80 95       	com	r24
 46c:	90 95       	com	r25
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	bd 01       	movw	r22, r26
 474:	cf 01       	movw	r24, r30
 476:	08 95       	ret

00000478 <__umulhisi3>:
 478:	a2 9f       	mul	r26, r18
 47a:	b0 01       	movw	r22, r0
 47c:	b3 9f       	mul	r27, r19
 47e:	c0 01       	movw	r24, r0
 480:	a3 9f       	mul	r26, r19
 482:	70 0d       	add	r23, r0
 484:	81 1d       	adc	r24, r1
 486:	11 24       	eor	r1, r1
 488:	91 1d       	adc	r25, r1
 48a:	b2 9f       	mul	r27, r18
 48c:	70 0d       	add	r23, r0
 48e:	81 1d       	adc	r24, r1
 490:	11 24       	eor	r1, r1
 492:	91 1d       	adc	r25, r1
 494:	08 95       	ret

00000496 <__eerd_block_m328p>:
 496:	dc 01       	movw	r26, r24
 498:	cb 01       	movw	r24, r22

0000049a <__eerd_blraw_m328p>:
 49a:	fc 01       	movw	r30, r24
 49c:	f9 99       	sbic	0x1f, 1	; 31
 49e:	fe cf       	rjmp	.-4      	; 0x49c <__eerd_blraw_m328p+0x2>
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <__eerd_blraw_m328p+0x14>
 4a2:	f2 bd       	out	0x22, r31	; 34
 4a4:	e1 bd       	out	0x21, r30	; 33
 4a6:	f8 9a       	sbi	0x1f, 0	; 31
 4a8:	31 96       	adiw	r30, 0x01	; 1
 4aa:	00 b4       	in	r0, 0x20	; 32
 4ac:	0d 92       	st	X+, r0
 4ae:	41 50       	subi	r20, 0x01	; 1
 4b0:	50 40       	sbci	r21, 0x00	; 0
 4b2:	b8 f7       	brcc	.-18     	; 0x4a2 <__eerd_blraw_m328p+0x8>
 4b4:	08 95       	ret

000004b6 <__eerd_byte_m328p>:
 4b6:	f9 99       	sbic	0x1f, 1	; 31
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <__eerd_byte_m328p>
 4ba:	92 bd       	out	0x22, r25	; 34
 4bc:	81 bd       	out	0x21, r24	; 33
 4be:	f8 9a       	sbi	0x1f, 0	; 31
 4c0:	99 27       	eor	r25, r25
 4c2:	80 b5       	in	r24, 0x20	; 32
 4c4:	08 95       	ret

000004c6 <__eerd_dword_m328p>:
 4c6:	a6 e1       	ldi	r26, 0x16	; 22
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	44 e0       	ldi	r20, 0x04	; 4
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__eerd_blraw_m328p>

000004d2 <__eerd_word_m328p>:
 4d2:	a8 e1       	ldi	r26, 0x18	; 24
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	42 e0       	ldi	r20, 0x02	; 2
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__eerd_blraw_m328p>

000004de <__eeupd_block_m328p>:
 4de:	dc 01       	movw	r26, r24
 4e0:	a4 0f       	add	r26, r20
 4e2:	b5 1f       	adc	r27, r21
 4e4:	41 50       	subi	r20, 0x01	; 1
 4e6:	50 40       	sbci	r21, 0x00	; 0
 4e8:	48 f0       	brcs	.+18     	; 0x4fc <__eeupd_block_m328p+0x1e>
 4ea:	cb 01       	movw	r24, r22
 4ec:	84 0f       	add	r24, r20
 4ee:	95 1f       	adc	r25, r21
 4f0:	2e 91       	ld	r18, -X
 4f2:	0e 94 80 02 	call	0x500	; 0x500 <__eeupd_r18_m328p>
 4f6:	41 50       	subi	r20, 0x01	; 1
 4f8:	50 40       	sbci	r21, 0x00	; 0
 4fa:	d0 f7       	brcc	.-12     	; 0x4f0 <__eeupd_block_m328p+0x12>
 4fc:	08 95       	ret

000004fe <__eeupd_byte_m328p>:
 4fe:	26 2f       	mov	r18, r22

00000500 <__eeupd_r18_m328p>:
 500:	f9 99       	sbic	0x1f, 1	; 31
 502:	fe cf       	rjmp	.-4      	; 0x500 <__eeupd_r18_m328p>
 504:	92 bd       	out	0x22, r25	; 34
 506:	81 bd       	out	0x21, r24	; 33
 508:	f8 9a       	sbi	0x1f, 0	; 31
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	00 b4       	in	r0, 0x20	; 32
 50e:	02 16       	cp	r0, r18
 510:	39 f0       	breq	.+14     	; 0x520 <__eeupd_r18_m328p+0x20>
 512:	1f ba       	out	0x1f, r1	; 31
 514:	20 bd       	out	0x20, r18	; 32
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	fa 9a       	sbi	0x1f, 2	; 31
 51c:	f9 9a       	sbi	0x1f, 1	; 31
 51e:	0f be       	out	0x3f, r0	; 63
 520:	08 95       	ret

00000522 <__eeupd_dword_m328p>:
 522:	03 96       	adiw	r24, 0x03	; 3
 524:	27 2f       	mov	r18, r23
 526:	0e 94 80 02 	call	0x500	; 0x500 <__eeupd_r18_m328p>
 52a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__eeupd_byte_m328p>
 52e:	25 2f       	mov	r18, r21
 530:	0e 94 80 02 	call	0x500	; 0x500 <__eeupd_r18_m328p>
 534:	24 2f       	mov	r18, r20
 536:	0c 94 80 02 	jmp	0x500	; 0x500 <__eeupd_r18_m328p>

0000053a <__eeupd_word_m328p>:
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	27 2f       	mov	r18, r23
 53e:	0e 94 80 02 	call	0x500	; 0x500 <__eeupd_r18_m328p>
 542:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__eeupd_byte_m328p>

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>
