
CH_9_code_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000121  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d1  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000142  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016d  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  00000635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000659  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRD = 0xFF; // PORT D의 8개 핀을 출력으로 설정
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	while(1)
	{
		for(int i = 0; i < 8; i++){
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
			PORTD = 0x01 << (7 - i); // i번 패턴
  88:	67 e0       	ldi	r22, 0x07	; 7
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	50 e0       	ldi	r21, 0x00	; 0
int main(void)
{
	DDRD = 0xFF; // PORT D의 8개 핀을 출력으로 설정
	while(1)
	{
		for(int i = 0; i < 8; i++){
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	e0 e0       	ldi	r30, 0x00	; 0
			PORTD = 0x01 << (7 - i); // i번 패턴
  94:	9b 01       	movw	r18, r22
  96:	28 1b       	sub	r18, r24
  98:	39 0b       	sbc	r19, r25
  9a:	da 01       	movw	r26, r20
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x22>
  9e:	aa 0f       	add	r26, r26
  a0:	bb 1f       	adc	r27, r27
  a2:	2a 95       	dec	r18
  a4:	e2 f7       	brpl	.-8      	; 0x9e <main+0x1e>
  a6:	ab b9       	out	0x0b, r26	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	bf ef       	ldi	r27, 0xFF	; 255
  aa:	23 ed       	ldi	r18, 0xD3	; 211
  ac:	30 e3       	ldi	r19, 0x30	; 48
  ae:	b1 50       	subi	r27, 0x01	; 1
  b0:	20 40       	sbci	r18, 0x00	; 0
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
int main(void)
{
	DDRD = 0xFF; // PORT D의 8개 핀을 출력으로 설정
	while(1)
	{
		for(int i = 0; i < 8; i++){
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	88 30       	cpi	r24, 0x08	; 8
  be:	91 05       	cpc	r25, r1
  c0:	4c f3       	brlt	.-46     	; 0x94 <main+0x14>
  c2:	8f 2f       	mov	r24, r31
  c4:	9e 2f       	mov	r25, r30
  c6:	e6 cf       	rjmp	.-52     	; 0x94 <main+0x14>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
