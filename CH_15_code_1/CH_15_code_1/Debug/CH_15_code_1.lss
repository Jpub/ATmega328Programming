
CH_15_code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000175  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000120  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000152  00000000  00000000  00000427  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000194  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000009c  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <turn_on_LED_in_PWM_manner>:
#include <util/delay.h>
#define LED_TIME 20
void turn_on_LED_in_PWM_manner(int dim)
{
	int i;
	PORTB = 0xFF; // LED 켜기
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	25 b9       	out	0x05, r18	; 5
	for(i = 0; i < 256; i++){
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
		if(i > dim) PORTB = 0x00; // 듀티 사이클을 넘어가면 LED 끄기
  88:	82 17       	cp	r24, r18
  8a:	93 07       	cpc	r25, r19
  8c:	0c f4       	brge	.+2      	; 0x90 <turn_on_LED_in_PWM_manner+0x10>
  8e:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4a e6       	ldi	r20, 0x6A	; 106
  92:	4a 95       	dec	r20
  94:	f1 f7       	brne	.-4      	; 0x92 <turn_on_LED_in_PWM_manner+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <turn_on_LED_in_PWM_manner+0x18>
#define LED_TIME 20
void turn_on_LED_in_PWM_manner(int dim)
{
	int i;
	PORTB = 0xFF; // LED 켜기
	for(i = 0; i < 256; i++){
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
  9c:	21 15       	cp	r18, r1
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	34 07       	cpc	r19, r20
  a2:	91 f7       	brne	.-28     	; 0x88 <turn_on_LED_in_PWM_manner+0x8>
		if(i > dim) PORTB = 0x00; // 듀티 사이클을 넘어가면 LED 끄기
		_delay_us(LED_TIME);
	}
}
  a4:	08 95       	ret

000000a6 <main>:
int main(void)
{
	DDRB = 0xFF; // PB5 핀(아두이노 13번)을 출력으로 설정
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	int dim = 0; // 현재 LED 밝기
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	d0 e0       	ldi	r29, 0x00	; 0
	int direction = 1; // 밝기 증가(1) 또는 감소(-1)
	while(1){
		if(dim == 0) direction = 1;
  ae:	01 e0       	ldi	r16, 0x01	; 1
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	ee 24       	eor	r14, r14
  b4:	e3 94       	inc	r14
  b6:	f1 2c       	mov	r15, r1
		if(dim == 255) direction = -1;
  b8:	cc 24       	eor	r12, r12
  ba:	ca 94       	dec	r12
  bc:	dd 24       	eor	r13, r13
  be:	da 94       	dec	r13
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <main+0x2c>
  c2:	cf 3f       	cpi	r28, 0xFF	; 255
  c4:	d1 05       	cpc	r29, r1
  c6:	29 f4       	brne	.+10     	; 0xd2 <main+0x2c>
  c8:	0c 2d       	mov	r16, r12
  ca:	1d 2d       	mov	r17, r13
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x2c>
{
	DDRB = 0xFF; // PB5 핀(아두이노 13번)을 출력으로 설정
	int dim = 0; // 현재 LED 밝기
	int direction = 1; // 밝기 증가(1) 또는 감소(-1)
	while(1){
		if(dim == 0) direction = 1;
  ce:	0e 2d       	mov	r16, r14
  d0:	1f 2d       	mov	r17, r15
		if(dim == 255) direction = -1;
		dim += direction; // 밝기 변화
  d2:	c0 0f       	add	r28, r16
  d4:	d1 1f       	adc	r29, r17
		turn_on_LED_in_PWM_manner(dim);
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 40 00 	call	0x80	; 0x80 <turn_on_LED_in_PWM_manner>
{
	DDRB = 0xFF; // PB5 핀(아두이노 13번)을 출력으로 설정
	int dim = 0; // 현재 LED 밝기
	int direction = 1; // 밝기 증가(1) 또는 감소(-1)
	while(1){
		if(dim == 0) direction = 1;
  dc:	20 97       	sbiw	r28, 0x00	; 0
  de:	b9 f3       	breq	.-18     	; 0xce <main+0x28>
  e0:	f0 cf       	rjmp	.-32     	; 0xc2 <main+0x1c>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
