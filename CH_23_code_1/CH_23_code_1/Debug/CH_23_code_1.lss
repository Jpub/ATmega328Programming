
CH_23_code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ae  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ed  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000174  00000000  00000000  00000455  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000170  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRB |= 0x0E; // 모터 제어를 위한 핀들을 출력으로 설정
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 60       	ori	r24, 0x0E	; 14
  84:	84 b9       	out	0x04, r24	; 4
	// 타이머/카운터 2번을 고속 PWM 모드로 설정
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
  86:	e0 eb       	ldi	r30, 0xB0	; 176
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1); // 비반전 모드
  90:	80 81       	ld	r24, Z
  92:	80 68       	ori	r24, 0x80	; 128
  94:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22); // 분주비 64
  96:	e1 eb       	ldi	r30, 0xB1	; 177
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	80 83       	st	Z, r24
	PORTB |= 0x04; // 초기 상태는 비활성화 상태
  a0:	2a 9a       	sbi	0x05, 2	; 5
	while(1)
	{
		PORTB &= ~0x04; // 모터 1 활성화
  a2:	2a 98       	cbi	0x05, 2	; 5
		PORTB |= 0x02; // 정방향 회전
  a4:	29 9a       	sbi	0x05, 1	; 5
		for(int i = 0; i < 256; i++){ // 속도 조절을 위한 PWM 신호 출력
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
			OCR2A = i;
  aa:	e3 eb       	ldi	r30, 0xB3	; 179
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f e7       	ldi	r18, 0x7F	; 127
  b2:	38 e3       	ldi	r19, 0x38	; 56
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	40 40       	sbci	r20, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
	PORTB |= 0x04; // 초기 상태는 비활성화 상태
	while(1)
	{
		PORTB &= ~0x04; // 모터 1 활성화
		PORTB |= 0x02; // 정방향 회전
		for(int i = 0; i < 256; i++){ // 속도 조절을 위한 PWM 신호 출력
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	81 15       	cp	r24, r1
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	92 07       	cpc	r25, r18
  ca:	89 f7       	brne	.-30     	; 0xae <main+0x2e>
			OCR2A = i;
			_delay_ms(25);
		}
		OCR2A = 0; // 모터 정지
  cc:	10 92 b3 00 	sts	0x00B3, r1
  d0:	3f ef       	ldi	r19, 0xFF	; 255
  d2:	43 ed       	ldi	r20, 0xD3	; 211
  d4:	80 e3       	ldi	r24, 0x30	; 48
  d6:	31 50       	subi	r19, 0x01	; 1
  d8:	40 40       	sbci	r20, 0x00	; 0
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x56>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
  e0:	00 00       	nop
		_delay_ms(1000);
		PORTB &= ~0x02; // 역방향 회전
  e2:	29 98       	cbi	0x05, 1	; 5
		for(int i = 0; i < 256; i++){ // 속도 조절을 위한 PWM 신호 출력
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
			OCR2A = i;
  e8:	e3 eb       	ldi	r30, 0xB3	; 179
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 83       	st	Z, r24
  ee:	2f e7       	ldi	r18, 0x7F	; 127
  f0:	38 e3       	ldi	r19, 0x38	; 56
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	40 40       	sbci	r20, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x74>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
			_delay_ms(25);
		}
		OCR2A = 0; // 모터 정지
		_delay_ms(1000);
		PORTB &= ~0x02; // 역방향 회전
		for(int i = 0; i < 256; i++){ // 속도 조절을 위한 PWM 신호 출력
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	81 15       	cp	r24, r1
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	92 07       	cpc	r25, r18
 108:	89 f7       	brne	.-30     	; 0xec <main+0x6c>
			OCR2A = i;
			_delay_ms(25);
		}
		OCR2A = 0; // 모터 정지
 10a:	10 92 b3 00 	sts	0x00B3, r1
		PORTB |= 0x04; // 모터 1 비활성화
 10e:	2a 9a       	sbi	0x05, 2	; 5
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x90>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
