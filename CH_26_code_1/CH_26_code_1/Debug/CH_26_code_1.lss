
CH_26_code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000037d  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d6  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ec  00000000  00000000  00000729  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000124  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e2  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000048d  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include "UART.h"
int main(int argc, char *argv[])
{
	unsigned char data;
	UART_INIT(); // UART 통신 초기화
  80:	0e 94 47 00 	call	0x8e	; 0x8e <UART_INIT>
	while (1) {
		data = UART_receive(); // 데이터 수신
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_receive>
		UART_transmit(data); // 수신된 문자 재전송
  88:	0e 94 67 00 	call	0xce	; 0xce <UART_transmit>
  8c:	fb cf       	rjmp	.-10     	; 0x84 <main+0x4>

0000008e <UART_INIT>:
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
  8e:	e0 ec       	ldi	r30, 0xC0	; 192
{
	char numString[11] = "0";
	int i, index = 0;
	
	if(no > 0){
		for(i = 0; no != 0 ; i++)
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	82 60       	ori	r24, 0x02	; 2
  96:	80 83       	st	Z, r24
  98:	10 92 c5 00 	sts	0x00C5, r1
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	80 93 c4 00 	sts	0x00C4, r24
  a2:	e2 ec       	ldi	r30, 0xC2	; 194
		{
			numString[i] = no % 10 + '0';
			no = no / 10;
		}
		numString[i] = '\0';
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	86 60       	ori	r24, 0x06	; 6
  aa:	80 83       	st	Z, r24
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
  ac:	e1 ec       	ldi	r30, 0xC1	; 193
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
	UART_transmit(numString[i]);
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
		}
		numString[i] = '\0';
		index = i - 1;
	}
	
	for(i = index; i >= 0; i--)
  bc:	08 95       	ret

000000be <UART_receive>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
	UART_transmit(numString[i]);
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <UART_receive+0x4>
  c8:	80 91 c6 00 	lds	r24, 0x00C6
  cc:	08 95       	ret

000000ce <UART_transmit>:
  ce:	e0 ec       	ldi	r30, 0xC0	; 192
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	95 ff       	sbrs	r25, 5
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <UART_transmit+0x4>
  d8:	80 93 c6 00 	sts	0x00C6, r24
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
