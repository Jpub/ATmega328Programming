
CH_11_code_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a7  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000076  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000cd  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012f  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  0000049f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT_PORT>:
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
void INIT_PORT(void)
{
	DDRB = 0x20; // PB5(디지털 13번 핀) 출력으로 설정
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; // LED는 꺼진 상태에서 시작
  84:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00; // 버튼 입력
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04; // PD2(디지털 2번 핀) 풀업 저항 사용
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11
  8c:	08 95       	ret

0000008e <main>:
}
int main(void)
{
	INIT_PORT(); // 포트 설정
  8e:	0e 94 40 00 	call	0x80	; 0x80 <INIT_PORT>
	while(1){
		if(PIND & 0x04) PORTB = 0x00; // LED 끄기
		else PORTB = 0x20; // LED 켜기
  92:	80 e2       	ldi	r24, 0x20	; 32
}
int main(void)
{
	INIT_PORT(); // 포트 설정
	while(1){
		if(PIND & 0x04) PORTB = 0x00; // LED 끄기
  94:	4a 9b       	sbis	0x09, 2	; 9
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0xe>
  98:	15 b8       	out	0x05, r1	; 5
  9a:	fc cf       	rjmp	.-8      	; 0x94 <main+0x6>
		else PORTB = 0x20; // LED 켜기
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	fa cf       	rjmp	.-12     	; 0x94 <main+0x6>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
